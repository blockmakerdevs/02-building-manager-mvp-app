{"ast":null,"code":"import { useContext, useImperativeHandle, useRef } from 'react';\nimport FieldContext from \"./FieldContext\";\nvar useImperativeInputHandle = function useImperativeInputHandle(ref, props) {\n  var inputRef = useRef();\n  var context = useContext(FieldContext);\n  useImperativeHandle(ref, function () {\n    return {\n      isFocused: function isFocused() {\n        var _inputRef$current;\n        return (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.isFocused();\n      },\n      focus: function focus() {\n        var _inputRef$current2;\n        return (_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.focus();\n      },\n      blur: function blur() {\n        var _inputRef$current3;\n        return (_inputRef$current3 = inputRef.current) == null ? void 0 : _inputRef$current3.blur();\n      },\n      clear: function clear() {\n        var _inputRef$current4;\n        (_inputRef$current4 = inputRef.current) == null ? void 0 : _inputRef$current4.clear();\n        props.onChangeText == null ? void 0 : props.onChangeText('');\n      },\n      validate: function validate() {\n        return context.validateField();\n      },\n      isValid: function isValid() {\n        return context.checkValidity();\n      }\n    };\n  });\n  return inputRef;\n};\nexport default useImperativeInputHandle;","map":{"version":3,"names":["useContext","useImperativeHandle","useRef","FieldContext","useImperativeInputHandle","ref","props","inputRef","context","isFocused","_inputRef$current","current","focus","_inputRef$current2","blur","_inputRef$current3","clear","_inputRef$current4","onChangeText","validate","validateField","isValid","checkValidity"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/textField/useImperativeInputHandle.js"],"sourcesContent":["import { useContext, useImperativeHandle, useRef } from 'react';\nimport FieldContext from \"./FieldContext\";\nconst useImperativeInputHandle = (ref, props) => {\n  const inputRef = useRef();\n  const context = useContext(FieldContext);\n  useImperativeHandle(ref, () => {\n    return {\n      isFocused: () => inputRef.current?.isFocused(),\n      focus: () => inputRef.current?.focus(),\n      blur: () => inputRef.current?.blur(),\n      clear: () => {\n        inputRef.current?.clear();\n        // NOTE: This fixes an RN issue - when triggering imperative clear method, it doesn't call onChangeText\n        props.onChangeText?.('');\n      },\n      validate: () => {\n        return context.validateField();\n      },\n      // Note: This returns field validity without actually validating it\n      isValid: () => {\n        return context.checkValidity();\n      }\n    };\n  });\n  return inputRef;\n};\nexport default useImperativeInputHandle;"],"mappings":"AAAA,SAASA,UAAU,EAAEC,mBAAmB,EAAEC,MAAM,QAAQ,OAAO;AAC/D,OAAOC,YAAY;AACnB,IAAMC,wBAAwB,GAAG,SAA3BA,wBAAwBA,CAAIC,GAAG,EAAEC,KAAK,EAAK;EAC/C,IAAMC,QAAQ,GAAGL,MAAM,CAAC,CAAC;EACzB,IAAMM,OAAO,GAAGR,UAAU,CAACG,YAAY,CAAC;EACxCF,mBAAmB,CAACI,GAAG,EAAE,YAAM;IAC7B,OAAO;MACLI,SAAS,EAAE,SAAAA,UAAA;QAAA,IAAAC,iBAAA;QAAA,QAAAA,iBAAA,GAAMH,QAAQ,CAACI,OAAO,qBAAhBD,iBAAA,CAAkBD,SAAS,CAAC,CAAC;MAAA;MAC9CG,KAAK,EAAE,SAAAA,MAAA;QAAA,IAAAC,kBAAA;QAAA,QAAAA,kBAAA,GAAMN,QAAQ,CAACI,OAAO,qBAAhBE,kBAAA,CAAkBD,KAAK,CAAC,CAAC;MAAA;MACtCE,IAAI,EAAE,SAAAA,KAAA;QAAA,IAAAC,kBAAA;QAAA,QAAAA,kBAAA,GAAMR,QAAQ,CAACI,OAAO,qBAAhBI,kBAAA,CAAkBD,IAAI,CAAC,CAAC;MAAA;MACpCE,KAAK,EAAE,SAAAA,MAAA,EAAM;QAAA,IAAAC,kBAAA;QACX,CAAAA,kBAAA,GAAAV,QAAQ,CAACI,OAAO,qBAAhBM,kBAAA,CAAkBD,KAAK,CAAC,CAAC;QAEzBV,KAAK,CAACY,YAAY,oBAAlBZ,KAAK,CAACY,YAAY,CAAG,EAAE,CAAC;MAC1B,CAAC;MACDC,QAAQ,EAAE,SAAAA,SAAA,EAAM;QACd,OAAOX,OAAO,CAACY,aAAa,CAAC,CAAC;MAChC,CAAC;MAEDC,OAAO,EAAE,SAAAA,QAAA,EAAM;QACb,OAAOb,OAAO,CAACc,aAAa,CAAC,CAAC;MAChC;IACF,CAAC;EACH,CAAC,CAAC;EACF,OAAOf,QAAQ;AACjB,CAAC;AACD,eAAeH,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}