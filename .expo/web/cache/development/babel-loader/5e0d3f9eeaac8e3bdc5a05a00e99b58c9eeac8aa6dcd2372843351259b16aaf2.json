{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { Spacings, Typography } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Segment = React.memo(function (props) {\n  var activeColor = props.activeColor,\n    label = props.label,\n    iconSource = props.iconSource,\n    iconStyle = props.iconStyle,\n    selectedIndex = props.selectedIndex,\n    onLayout = props.onLayout,\n    onPress = props.onPress,\n    inactiveColor = props.inactiveColor,\n    index = props.index,\n    iconOnRight = props.iconOnRight,\n    style = props.style,\n    testID = props.testID;\n  var animatedTextStyle = useAnimatedStyle(function () {\n    var color = (selectedIndex == null ? void 0 : selectedIndex.value) === index ? activeColor : inactiveColor;\n    return {\n      color: color\n    };\n  });\n  var animatedIconStyle = useAnimatedStyle(function () {\n    var tintColor = (selectedIndex == null ? void 0 : selectedIndex.value) === index ? activeColor : inactiveColor;\n    return {\n      tintColor: tintColor\n    };\n  });\n  var segmentStyle = useMemo(function () {\n    return [{\n      paddingHorizontal: Spacings.s3,\n      paddingVertical: Spacings.s2\n    }, style];\n  }, [style]);\n  var renderIcon = useCallback(function () {\n    return iconSource && _jsx(Reanimated.Image, {\n      source: iconSource,\n      style: [animatedIconStyle, iconStyle]\n    });\n  }, [iconSource, iconStyle]);\n  var onSegmentPress = useCallback(function () {\n    (selectedIndex == null ? void 0 : selectedIndex.value) !== index && (onPress == null ? void 0 : onPress(index));\n  }, [index, onPress]);\n  var segmentOnLayout = useCallback(function (event) {\n    onLayout == null ? void 0 : onLayout(index, event);\n  }, [onLayout, index]);\n  return _jsxs(TouchableOpacity, {\n    onLayout: segmentOnLayout,\n    style: segmentStyle,\n    onPress: onSegmentPress,\n    row: true,\n    flexG: true,\n    center: true,\n    testID: `${testID}.${index}`,\n    children: [!iconOnRight && renderIcon(), label && _jsx(Reanimated.Text, {\n      fsTagName: 'unmasked',\n      numberOfLines: 1,\n      style: [animatedTextStyle, Typography.text90],\n      children: label\n    }), iconOnRight && renderIcon()]\n  });\n});\nexport default asBaseComponent(Segment);","map":{"version":3,"names":["React","useCallback","useMemo","Reanimated","useAnimatedStyle","Spacings","Typography","asBaseComponent","TouchableOpacity","jsx","_jsx","jsxs","_jsxs","Segment","memo","props","activeColor","label","iconSource","iconStyle","selectedIndex","onLayout","onPress","inactiveColor","index","iconOnRight","style","testID","animatedTextStyle","color","value","animatedIconStyle","tintColor","segmentStyle","paddingHorizontal","s3","paddingVertical","s2","renderIcon","Image","source","onSegmentPress","segmentOnLayout","event","row","flexG","center","children","Text","fsTagName","numberOfLines","text90"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/segmentedControl/segment.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { Spacings, Typography } from \"../../style\";\nimport { asBaseComponent } from \"../../commons/new\";\nimport TouchableOpacity from \"../touchableOpacity\";\n/**\n * Segment sub-component for SegmentedControl component\n */\nconst Segment = React.memo(props => {\n  const {\n    activeColor,\n    label,\n    iconSource,\n    iconStyle,\n    selectedIndex,\n    onLayout,\n    onPress,\n    inactiveColor,\n    index,\n    iconOnRight,\n    style,\n    testID\n  } = props;\n  const animatedTextStyle = useAnimatedStyle(() => {\n    const color = selectedIndex?.value === index ? activeColor : inactiveColor;\n    return {\n      color\n    };\n  });\n  const animatedIconStyle = useAnimatedStyle(() => {\n    const tintColor = selectedIndex?.value === index ? activeColor : inactiveColor;\n    return {\n      tintColor\n    };\n  });\n  const segmentStyle = useMemo(() => {\n    return [{\n      paddingHorizontal: Spacings.s3,\n      paddingVertical: Spacings.s2\n    }, style];\n  }, [style]);\n  const renderIcon = useCallback(() => {\n    return iconSource && <Reanimated.Image source={iconSource} style={[animatedIconStyle, iconStyle]} />;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [iconSource, iconStyle]);\n  const onSegmentPress = useCallback(() => {\n    selectedIndex?.value !== index && onPress?.(index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [index, onPress]);\n  const segmentOnLayout = useCallback(event => {\n    onLayout?.(index, event);\n  }, [onLayout, index]);\n  return <TouchableOpacity onLayout={segmentOnLayout} style={segmentStyle} onPress={onSegmentPress} row flexG center testID={`${testID}.${index}`}>\n      {!iconOnRight && renderIcon()}\n      {label && <Reanimated.Text fsTagName={'unmasked'} numberOfLines={1} style={[animatedTextStyle, Typography.text90]}>\n          {label}\n        </Reanimated.Text>}\n      {iconOnRight && renderIcon()}\n    </TouchableOpacity>;\n});\nexport default asBaseComponent(Segment);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}