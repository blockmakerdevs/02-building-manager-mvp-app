{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _forEach from \"lodash/forEach\";\nimport _merge from \"lodash/merge\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _xor from \"lodash/xor\";\nimport _remove from \"lodash/remove\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport { PlatformColor } from \"react-native-web/dist/index\";\nimport Constants from \"../commons/Constants\";\nimport Config from \"../commons/Config\";\nvar Scheme = function () {\n  function Scheme() {\n    var _this = this;\n    _classCallCheck(this, Scheme);\n    this.currentScheme = Config.appScheme;\n    this.schemes = {\n      light: {},\n      dark: {}\n    };\n    this.changeListeners = [];\n    Appearance.addChangeListener(function () {\n      if (_this.currentScheme === 'default') {\n        _this.broadcastSchemeChange();\n      }\n    });\n  }\n  _createClass(Scheme, [{\n    key: \"broadcastSchemeChange\",\n    value: function broadcastSchemeChange() {\n      var _this2 = this;\n      this.changeListeners.forEach(function (listener) {\n        return listener(_this2.getSchemeType());\n      });\n    }\n  }, {\n    key: \"getSchemeType\",\n    value: function getSchemeType() {\n      var scheme = this.currentScheme === 'default' ? Appearance.getColorScheme() : this.currentScheme;\n      return scheme != null ? scheme : 'light';\n    }\n  }, {\n    key: \"isDarkMode\",\n    value: function isDarkMode() {\n      return this.getSchemeType() === 'dark';\n    }\n  }, {\n    key: \"setScheme\",\n    value: function setScheme(scheme) {\n      var prevSchemeType = this.getSchemeType();\n      if (!['light', 'dark', 'default'].includes(scheme)) {\n        throw new Error(`${scheme} is invalid colorScheme, please use 'light' | 'dark' | 'default'`);\n      }\n      this.currentScheme = scheme;\n      if (prevSchemeType !== this.getSchemeType()) {\n        this.broadcastSchemeChange();\n      }\n    }\n  }, {\n    key: \"loadSchemes\",\n    value: function loadSchemes(schemes) {\n      var _this3 = this;\n      var lightSchemeKeys = Object.keys(schemes.light);\n      var darkSchemeKeys = Object.keys(schemes.dark);\n      var missingKeys = _xor(lightSchemeKeys, darkSchemeKeys);\n      if (!_isEmpty(missingKeys)) {\n        throw new Error(`There is a mismatch in scheme keys: ${missingKeys.join(', ')}`);\n      }\n      var platformColorsSchemes = _cloneDeep(schemes);\n      _forEach(schemes, function (scheme, schemeKey) {\n        _forEach(scheme, function (colorValue, colorKey) {\n          Object.defineProperty(platformColorsSchemes[schemeKey], colorKey, {\n            get: function get() {\n              var color = colorValue;\n              if (Config.usePlatformColors) {\n                if (Constants.isAndroid) {\n                  color = PlatformColor(`@color/${colorKey.replace(/^[$]/, '')}`);\n                } else {\n                  color = PlatformColor(colorKey);\n                }\n                color.toString = function () {\n                  return schemes[_this3.getSchemeType()][colorKey];\n                };\n              }\n              return color;\n            }\n          });\n        });\n      });\n      _merge(this.schemes, platformColorsSchemes);\n    }\n  }, {\n    key: \"getScheme\",\n    value: function getScheme() {\n      return this.schemes[this.getSchemeType()];\n    }\n  }, {\n    key: \"addChangeListener\",\n    value: function addChangeListener(listener) {\n      this.changeListeners.push(listener);\n    }\n  }, {\n    key: \"removeChangeListener\",\n    value: function removeChangeListener(listener) {\n      _remove(this.changeListeners, function (changeListener) {\n        return changeListener === listener;\n      });\n    }\n  }]);\n  return Scheme;\n}();\nexport default new Scheme();","map":{"version":3,"names":["_cloneDeep","_forEach","_merge","_isEmpty","_xor","_remove","Appearance","PlatformColor","Constants","Config","Scheme","_this","_classCallCheck","currentScheme","appScheme","schemes","light","dark","changeListeners","addChangeListener","broadcastSchemeChange","_createClass","key","value","_this2","forEach","listener","getSchemeType","scheme","getColorScheme","isDarkMode","setScheme","prevSchemeType","includes","Error","loadSchemes","_this3","lightSchemeKeys","Object","keys","darkSchemeKeys","missingKeys","join","platformColorsSchemes","schemeKey","colorValue","colorKey","defineProperty","get","color","usePlatformColors","isAndroid","replace","toString","getScheme","push","removeChangeListener","changeListener"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/style/scheme.js"],"sourcesContent":["import _cloneDeep from \"lodash/cloneDeep\";\nimport _forEach from \"lodash/forEach\";\nimport _merge from \"lodash/merge\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _xor from \"lodash/xor\";\nimport _remove from \"lodash/remove\";\nimport { Appearance, PlatformColor } from 'react-native';\nimport Constants from \"../commons/Constants\";\nimport Config from \"../commons/Config\";\nclass Scheme {\n  currentScheme = Config.appScheme;\n  schemes = {\n    light: {},\n    dark: {}\n  };\n  changeListeners = [];\n  constructor() {\n    Appearance.addChangeListener(() => {\n      if (this.currentScheme === 'default') {\n        this.broadcastSchemeChange();\n      }\n    });\n  }\n  broadcastSchemeChange() {\n    this.changeListeners.forEach(listener => listener(this.getSchemeType()));\n  }\n\n  /**\n   * Get app's current color scheme\n   */\n  getSchemeType() {\n    const scheme = this.currentScheme === 'default' ? Appearance.getColorScheme() : this.currentScheme;\n    return scheme ?? 'light';\n  }\n\n  /** \n   * Whether the app's scheme is 'dark', i.e. is on dark mode\n   */\n  isDarkMode() {\n    return this.getSchemeType() === 'dark';\n  }\n\n  /**\n   * Set color scheme for app\n   * arguments:\n   * scheme - color scheme e.g light/dark/default\n   */\n  setScheme(scheme) {\n    const prevSchemeType = this.getSchemeType();\n    if (!['light', 'dark', 'default'].includes(scheme)) {\n      throw new Error(`${scheme} is invalid colorScheme, please use 'light' | 'dark' | 'default'`);\n    }\n    this.currentScheme = scheme;\n    if (prevSchemeType !== this.getSchemeType()) {\n      this.broadcastSchemeChange();\n    }\n  }\n\n  /**\n   * Load set of schemes for light/dark mode\n   * arguments:\n   * schemes - two sets of map of colors e.g {light: {screen: 'white'}, dark: {screen: 'black'}}\n   */\n  loadSchemes(schemes) {\n    const lightSchemeKeys = Object.keys(schemes.light);\n    const darkSchemeKeys = Object.keys(schemes.dark);\n    const missingKeys = _xor(lightSchemeKeys, darkSchemeKeys);\n    if (!_isEmpty(missingKeys)) {\n      throw new Error(`There is a mismatch in scheme keys: ${missingKeys.join(', ')}`);\n    }\n    const platformColorsSchemes = _cloneDeep(schemes);\n    _forEach(schemes, (scheme, schemeKey) => {\n      _forEach(scheme, (colorValue, colorKey) => {\n        // @ts-expect-error\n        Object.defineProperty(platformColorsSchemes[schemeKey], colorKey, {\n          get: () => {\n            let color = colorValue;\n            if (Config.usePlatformColors) {\n              if (Constants.isAndroid) {\n                // Remove the $ prefix cause it's not allowed in Android and add the @color prefix\n                color = PlatformColor(`@color/${colorKey.replace(/^[$]/, '')}`);\n              } else {\n                color = PlatformColor(colorKey);\n              }\n              // Get the original hex string value by calling toString()\n              color.toString = () => schemes[this.getSchemeType()][colorKey];\n            }\n            return color;\n          }\n        });\n      });\n    });\n    _merge(this.schemes, platformColorsSchemes);\n  }\n\n  /**\n   * Retrieve scheme by current scheme type\n   */\n  getScheme() {\n    return this.schemes[this.getSchemeType()];\n  }\n\n  /**\n   * Add a change scheme event listener\n   */\n  addChangeListener(listener) {\n    this.changeListeners.push(listener);\n  }\n\n  /**\n   * Remove a change scheme event listener\n   * arguments:\n   * listener - listener reference to remove\n   */\n  removeChangeListener(listener) {\n    _remove(this.changeListeners, changeListener => changeListener === listener);\n  }\n}\nexport default new Scheme();"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,MAAM,MAAM,cAAc;AACjC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,OAAO,MAAM,eAAe;AAAC,OAAAC,UAAA;AAAA,SACfC,aAAa;AAClC,OAAOC,SAAS;AAChB,OAAOC,MAAM;AAA0B,IACjCC,MAAM;EAOV,SAAAA,OAAA,EAAc;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAF,MAAA;IAAA,KANdG,aAAa,GAAGJ,MAAM,CAACK,SAAS;IAAA,KAChCC,OAAO,GAAG;MACRC,KAAK,EAAE,CAAC,CAAC;MACTC,IAAI,EAAE,CAAC;IACT,CAAC;IAAA,KACDC,eAAe,GAAG,EAAE;IAElBZ,UAAU,CAACa,iBAAiB,CAAC,YAAM;MACjC,IAAIR,KAAI,CAACE,aAAa,KAAK,SAAS,EAAE;QACpCF,KAAI,CAACS,qBAAqB,CAAC,CAAC;MAC9B;IACF,CAAC,CAAC;EACJ;EAACC,YAAA,CAAAX,MAAA;IAAAY,GAAA;IAAAC,KAAA,EACD,SAAAH,sBAAA,EAAwB;MAAA,IAAAI,MAAA;MACtB,IAAI,CAACN,eAAe,CAACO,OAAO,CAAC,UAAAC,QAAQ;QAAA,OAAIA,QAAQ,CAACF,MAAI,CAACG,aAAa,CAAC,CAAC,CAAC;MAAA,EAAC;IAC1E;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAKD,SAAAI,cAAA,EAAgB;MACd,IAAMC,MAAM,GAAG,IAAI,CAACf,aAAa,KAAK,SAAS,GAAGP,UAAU,CAACuB,cAAc,CAAC,CAAC,GAAG,IAAI,CAAChB,aAAa;MAClG,OAAOe,MAAM,WAANA,MAAM,GAAI,OAAO;IAC1B;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAKD,SAAAO,WAAA,EAAa;MACX,OAAO,IAAI,CAACH,aAAa,CAAC,CAAC,KAAK,MAAM;IACxC;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAOD,SAAAQ,UAAUH,MAAM,EAAE;MAChB,IAAMI,cAAc,GAAG,IAAI,CAACL,aAAa,CAAC,CAAC;MAC3C,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAACM,QAAQ,CAACL,MAAM,CAAC,EAAE;QAClD,MAAM,IAAIM,KAAK,CAAE,GAAEN,MAAO,kEAAiE,CAAC;MAC9F;MACA,IAAI,CAACf,aAAa,GAAGe,MAAM;MAC3B,IAAII,cAAc,KAAK,IAAI,CAACL,aAAa,CAAC,CAAC,EAAE;QAC3C,IAAI,CAACP,qBAAqB,CAAC,CAAC;MAC9B;IACF;EAAC;IAAAE,GAAA;IAAAC,KAAA,EAOD,SAAAY,YAAYpB,OAAO,EAAE;MAAA,IAAAqB,MAAA;MACnB,IAAMC,eAAe,GAAGC,MAAM,CAACC,IAAI,CAACxB,OAAO,CAACC,KAAK,CAAC;MAClD,IAAMwB,cAAc,GAAGF,MAAM,CAACC,IAAI,CAACxB,OAAO,CAACE,IAAI,CAAC;MAChD,IAAMwB,WAAW,GAAGrC,IAAI,CAACiC,eAAe,EAAEG,cAAc,CAAC;MACzD,IAAI,CAACrC,QAAQ,CAACsC,WAAW,CAAC,EAAE;QAC1B,MAAM,IAAIP,KAAK,CAAE,uCAAsCO,WAAW,CAACC,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;MAClF;MACA,IAAMC,qBAAqB,GAAG3C,UAAU,CAACe,OAAO,CAAC;MACjDd,QAAQ,CAACc,OAAO,EAAE,UAACa,MAAM,EAAEgB,SAAS,EAAK;QACvC3C,QAAQ,CAAC2B,MAAM,EAAE,UAACiB,UAAU,EAAEC,QAAQ,EAAK;UAEzCR,MAAM,CAACS,cAAc,CAACJ,qBAAqB,CAACC,SAAS,CAAC,EAAEE,QAAQ,EAAE;YAChEE,GAAG,EAAE,SAAAA,IAAA,EAAM;cACT,IAAIC,KAAK,GAAGJ,UAAU;cACtB,IAAIpC,MAAM,CAACyC,iBAAiB,EAAE;gBAC5B,IAAI1C,SAAS,CAAC2C,SAAS,EAAE;kBAEvBF,KAAK,GAAG1C,aAAa,CAAE,UAASuC,QAAQ,CAACM,OAAO,CAAC,MAAM,EAAE,EAAE,CAAE,EAAC,CAAC;gBACjE,CAAC,MAAM;kBACLH,KAAK,GAAG1C,aAAa,CAACuC,QAAQ,CAAC;gBACjC;gBAEAG,KAAK,CAACI,QAAQ,GAAG;kBAAA,OAAMtC,OAAO,CAACqB,MAAI,CAACT,aAAa,CAAC,CAAC,CAAC,CAACmB,QAAQ,CAAC;gBAAA;cAChE;cACA,OAAOG,KAAK;YACd;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;MACF/C,MAAM,CAAC,IAAI,CAACa,OAAO,EAAE4B,qBAAqB,CAAC;IAC7C;EAAC;IAAArB,GAAA;IAAAC,KAAA,EAKD,SAAA+B,UAAA,EAAY;MACV,OAAO,IAAI,CAACvC,OAAO,CAAC,IAAI,CAACY,aAAa,CAAC,CAAC,CAAC;IAC3C;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAKD,SAAAJ,kBAAkBO,QAAQ,EAAE;MAC1B,IAAI,CAACR,eAAe,CAACqC,IAAI,CAAC7B,QAAQ,CAAC;IACrC;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAOD,SAAAiC,qBAAqB9B,QAAQ,EAAE;MAC7BrB,OAAO,CAAC,IAAI,CAACa,eAAe,EAAE,UAAAuC,cAAc;QAAA,OAAIA,cAAc,KAAK/B,QAAQ;MAAA,EAAC;IAC9E;EAAC;EAAA,OAAAhB,MAAA;AAAA;AAEH,eAAe,IAAIA,MAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}