{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"expandableContent\", \"useDialog\", \"modalProps\", \"dialogProps\", \"migrateDialog\", \"showTopBar\", \"topBarProps\", \"renderCustomOverlay\", \"disabled\", \"onPress\", \"customValue\", \"testID\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport DialogOld from \"../../components/dialog\";\nimport DialogNew from \"../Dialog\";\nimport { Colors } from \"../../style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ExpandableOverlay = function ExpandableOverlay(props, ref) {\n  var children = props.children,\n    expandableContent = props.expandableContent,\n    useDialog = props.useDialog,\n    modalProps = props.modalProps,\n    dialogProps = props.dialogProps,\n    migrateDialog = props.migrateDialog,\n    showTopBar = props.showTopBar,\n    topBarProps = props.topBarProps,\n    renderCustomOverlay = props.renderCustomOverlay,\n    disabled = props.disabled,\n    onPress = props.onPress,\n    customValue = props.customValue,\n    testID = props.testID,\n    others = _objectWithoutProperties(props, _excluded);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    visible = _useState2[0],\n    setExpandableVisible = _useState2[1];\n  var openExpandable = useCallback(function () {\n    setExpandableVisible(true);\n    onPress == null ? void 0 : onPress(props);\n  }, [onPress, customValue]);\n  var closeExpandable = useCallback(function () {\n    setExpandableVisible(false);\n    useDialog ? dialogProps == null ? void 0 : dialogProps.onDismiss == null ? void 0 : dialogProps.onDismiss() : modalProps == null ? void 0 : modalProps.onDismiss == null ? void 0 : modalProps.onDismiss();\n  }, [useDialog, dialogProps == null ? void 0 : dialogProps.onDismiss, modalProps == null ? void 0 : modalProps.onDismiss]);\n  var toggleExpandable = useCallback(function () {\n    return visible ? closeExpandable() : openExpandable();\n  }, [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, function () {\n    return {\n      openExpandable: openExpandable,\n      closeExpandable: closeExpandable,\n      toggleExpandable: toggleExpandable\n    };\n  });\n  var renderModal = function renderModal() {\n    return _jsxs(Modal, _objectSpread(_objectSpread({\n      testID: `${testID}.overlay`,\n      overlayBackgroundColor: Colors.$backgroundDefault\n    }, modalProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: [showTopBar && _jsx(Modal.TopBar, _objectSpread({\n        onDone: closeExpandable\n      }, topBarProps)), expandableContent]\n    }));\n  };\n  var renderDialog = function renderDialog() {\n    var Dialog = migrateDialog ? DialogNew : DialogOld;\n    return _jsx(Dialog, _objectSpread(_objectSpread({\n      testID: `${testID}.overlay`\n    }, dialogProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: expandableContent\n    }));\n  };\n  var renderOverlay = function renderOverlay() {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible: visible,\n        openExpandable: openExpandable,\n        closeExpandable: closeExpandable,\n        toggleExpandable: toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n  return _jsxs(TouchableOpacity, _objectSpread(_objectSpread({}, others), {}, {\n    onPress: openExpandable,\n    disabled: disabled,\n    testID: testID,\n    children: [_jsx(View, {\n      pointerEvents: \"none\",\n      children: children\n    }), renderOverlay()]\n  }));\n};\nexport default forwardRef(ExpandableOverlay);","map":{"version":3,"names":["React","useCallback","useState","forwardRef","useImperativeHandle","TouchableOpacity","View","Modal","DialogOld","DialogNew","Colors","jsx","_jsx","jsxs","_jsxs","ExpandableOverlay","props","ref","children","expandableContent","useDialog","modalProps","dialogProps","migrateDialog","showTopBar","topBarProps","renderCustomOverlay","disabled","onPress","customValue","testID","others","_objectWithoutProperties","_excluded","_useState","_useState2","_slicedToArray","visible","setExpandableVisible","openExpandable","closeExpandable","onDismiss","toggleExpandable","renderModal","_objectSpread","overlayBackgroundColor","$backgroundDefault","TopBar","onDone","renderDialog","Dialog","renderOverlay","pointerEvents"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/incubator/expandableOverlay/index.js"],"sourcesContent":["import React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport DialogOld from \"../../components/dialog\";\nimport DialogNew from \"../Dialog\";\nimport { Colors } from \"../../style\";\nconst ExpandableOverlay = (props, ref) => {\n  const {\n    children,\n    expandableContent,\n    useDialog,\n    modalProps,\n    dialogProps,\n    migrateDialog,\n    showTopBar,\n    topBarProps,\n    renderCustomOverlay,\n    disabled,\n    onPress,\n    customValue,\n    testID,\n    ...others\n  } = props;\n  const [visible, setExpandableVisible] = useState(false);\n  const openExpandable = useCallback(() => {\n    setExpandableVisible(true);\n    onPress?.(props);\n  }, [onPress, customValue]);\n  const closeExpandable = useCallback(() => {\n    setExpandableVisible(false);\n    useDialog ? dialogProps?.onDismiss?.() : modalProps?.onDismiss?.();\n  }, [useDialog, dialogProps?.onDismiss, modalProps?.onDismiss]);\n  const toggleExpandable = useCallback(() => visible ? closeExpandable() : openExpandable(), [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, () => ({\n    openExpandable,\n    closeExpandable,\n    toggleExpandable\n  }));\n  const renderModal = () => {\n    return <Modal testID={`${testID}.overlay`} overlayBackgroundColor={Colors.$backgroundDefault} {...modalProps} visible={visible} onDismiss={closeExpandable}>\n        {showTopBar && <Modal.TopBar onDone={closeExpandable} {...topBarProps} />}\n        {expandableContent}\n      </Modal>;\n  };\n  const renderDialog = () => {\n    const Dialog = migrateDialog ? DialogNew : DialogOld;\n    return (\n      // @ts-expect-error\n      <Dialog testID={`${testID}.overlay`} {...dialogProps} visible={visible} onDismiss={closeExpandable}>\n        {expandableContent}\n      </Dialog>\n    );\n  };\n  const renderOverlay = () => {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible,\n        openExpandable,\n        closeExpandable,\n        toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n  return <TouchableOpacity {...others} onPress={openExpandable} disabled={disabled} testID={testID}>\n      <View pointerEvents=\"none\">{children}</View>\n      {renderOverlay()}\n    </TouchableOpacity>;\n};\nexport default forwardRef(ExpandableOverlay);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}