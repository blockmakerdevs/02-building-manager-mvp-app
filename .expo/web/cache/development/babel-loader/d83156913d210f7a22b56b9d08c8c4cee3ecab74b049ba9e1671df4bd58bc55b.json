{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport var orientations = function (orientations) {\n  orientations[\"PORTRAIT\"] = \"portrait\";\n  orientations[\"LANDSCAPE\"] = \"landscape\";\n  return orientations;\n}({});\nfunction breakpointComparator(b1, b2) {\n  return b1.breakpoint - b2.breakpoint;\n}\nvar isAndroid = Platform.OS === 'android';\nvar isIOS = Platform.OS === 'ios';\nvar isWeb = Platform.OS === 'web';\nvar isTablet;\nvar statusBarHeight;\nvar screenHeight = Dimensions.get('screen').height;\nvar screenWidth = Dimensions.get('screen').width;\nvar windowHeight = Dimensions.get('window').height;\nvar windowWidth = Dimensions.get('window').width;\nvar breakpoints;\nvar defaultMargin = 0;\nvar isSubWindow = windowWidth < screenWidth;\nisTablet = Platform.isPad || getAspectRatio() < 1.6 && Math.max(screenWidth, screenHeight) >= 900;\nfunction setStatusBarHeight() {\n  var StatusBarManager = NativeModules.StatusBarManager;\n  statusBarHeight = (StatusBarManager == null ? void 0 : StatusBarManager.HEIGHT) || 0;\n}\nfunction getAspectRatio() {\n  return screenWidth < screenHeight ? screenHeight / screenWidth : screenWidth / screenHeight;\n}\nfunction getOrientation(height, width) {\n  return width < height ? orientations.PORTRAIT : orientations.LANDSCAPE;\n}\nexport function updateConstants(dimensions) {\n  screenHeight = dimensions.screen.height;\n  screenWidth = dimensions.screen.width;\n  windowWidth = dimensions.window.width;\n  windowHeight = dimensions.window.height;\n  setStatusBarHeight();\n}\nvar accessibility = {\n  isScreenReaderEnabled: false\n};\nfunction handleScreenReaderChanged(isScreenReaderEnabled) {\n  accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n}\nAccessibilityInfo.addEventListener('screenReaderChanged', handleScreenReaderChanged);\nfunction setAccessibility() {\n  AccessibilityInfo.isScreenReaderEnabled().then(function (isScreenReaderEnabled) {\n    accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n  });\n}\nsetAccessibility();\nvar constants = {\n  orientations: orientations,\n  isAndroid: isAndroid,\n  isIOS: isIOS,\n  isWeb: isWeb,\n  getAndroidVersion: function getAndroidVersion() {\n    return isAndroid ? parseInt(Platform.Version, 10) : undefined;\n  },\n  get statusBarHeight() {\n    return statusBarHeight;\n  },\n  isRTL: I18nManager.isRTL,\n  get orientation() {\n    return getOrientation(windowHeight, windowWidth);\n  },\n  get isLandscape() {\n    return getOrientation(windowHeight, windowWidth) === orientations.LANDSCAPE;\n  },\n  get screenWidth() {\n    return screenWidth;\n  },\n  get screenHeight() {\n    return screenHeight;\n  },\n  get windowWidth() {\n    return windowWidth;\n  },\n  get windowHeight() {\n    return windowHeight;\n  },\n  get isSmallWindow() {\n    return windowWidth <= 340;\n  },\n  get isSmallScreen() {\n    return screenWidth <= 340;\n  },\n  get isShortScreen() {\n    return screenHeight <= 600;\n  },\n  get isWideScreen() {\n    return isTablet && !isSubWindow || this.isLandscape;\n  },\n  get screenAspectRatio() {\n    return getAspectRatio();\n  },\n  get isTablet() {\n    return isTablet;\n  },\n  set isTablet(value) {\n    isTablet = value;\n  },\n  setBreakpoints: function setBreakpoints(value, options) {\n    breakpoints = value.sort(breakpointComparator);\n    if (options) {\n      defaultMargin = options.defaultMargin;\n    }\n  },\n  getPageMargins: function getPageMargins() {\n    if (!breakpoints) {\n      return 0;\n    }\n    for (var i = breakpoints.length - 1; i >= 0; --i) {\n      if (windowWidth > breakpoints[i].breakpoint) {\n        return breakpoints[i].pageMargin;\n      }\n    }\n    return defaultMargin;\n  },\n  getSafeAreaInsets: function getSafeAreaInsets() {\n    var orientation = getOrientation(screenHeight, screenWidth);\n    return orientation === orientations.LANDSCAPE ? {\n      left: 44,\n      right: 44,\n      bottom: 24,\n      top: 0\n    } : {\n      left: 0,\n      right: 0,\n      bottom: 34,\n      top: 44\n    };\n  },\n  get isIphoneX() {\n    return isIOS && !Platform.isPad && !Platform.isTVOS && (screenHeight >= 812 || screenWidth >= 812);\n  },\n  dimensionsEventListener: undefined,\n  addDimensionsEventListener: function addDimensionsEventListener(callback) {\n    return Dimensions.addEventListener('change', callback);\n  },\n  removeDimensionsEventListener: function removeDimensionsEventListener(callback) {\n    if (callback.remove) {\n      callback.remove();\n    }\n  },\n  get accessibility() {\n    return accessibility;\n  },\n  backspaceKey: 'Backspace',\n  enterKey: 'Enter'\n};\nsetStatusBarHeight();\nDimensions.addEventListener('change', updateConstants);\nexport default constants;\nexport var _reset = function _reset() {\n  breakpoints = undefined;\n  defaultMargin = 0;\n};","map":{"version":3,"names":["orientations","breakpointComparator","b1","b2","breakpoint","isAndroid","Platform","OS","isIOS","isWeb","isTablet","statusBarHeight","screenHeight","Dimensions","get","height","screenWidth","width","windowHeight","windowWidth","breakpoints","defaultMargin","isSubWindow","isPad","getAspectRatio","Math","max","setStatusBarHeight","StatusBarManager","NativeModules","HEIGHT","getOrientation","PORTRAIT","LANDSCAPE","updateConstants","dimensions","screen","window","accessibility","isScreenReaderEnabled","handleScreenReaderChanged","AccessibilityInfo","addEventListener","setAccessibility","then","constants","getAndroidVersion","parseInt","Version","undefined","isRTL","I18nManager","orientation","isLandscape","isSmallWindow","isSmallScreen","isShortScreen","isWideScreen","screenAspectRatio","value","setBreakpoints","options","sort","getPageMargins","i","length","pageMargin","getSafeAreaInsets","left","right","bottom","top","isIphoneX","isTVOS","dimensionsEventListener","addDimensionsEventListener","callback","removeDimensionsEventListener","remove","backspaceKey","enterKey","_reset"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/commons/Constants.js"],"sourcesContent":["import { Platform, Dimensions, NativeModules, I18nManager, AccessibilityInfo } from 'react-native';\nexport let orientations = /*#__PURE__*/function (orientations) {\n  orientations[\"PORTRAIT\"] = \"portrait\";\n  orientations[\"LANDSCAPE\"] = \"landscape\";\n  return orientations;\n}({});\nfunction breakpointComparator(b1, b2) {\n  return b1.breakpoint - b2.breakpoint;\n}\nconst isAndroid = Platform.OS === 'android';\nconst isIOS = Platform.OS === 'ios';\nconst isWeb = Platform.OS === 'web';\nlet isTablet;\nlet statusBarHeight;\nlet screenHeight = Dimensions.get('screen').height;\nlet screenWidth = Dimensions.get('screen').width;\nlet windowHeight = Dimensions.get('window').height;\nlet windowWidth = Dimensions.get('window').width;\nlet breakpoints;\nlet defaultMargin = 0;\nconst isSubWindow = windowWidth < screenWidth;\n//@ts-ignore\nisTablet = Platform.isPad || getAspectRatio() < 1.6 && Math.max(screenWidth, screenHeight) >= 900;\nfunction setStatusBarHeight() {\n  const {\n    StatusBarManager\n  } = NativeModules;\n  statusBarHeight = StatusBarManager?.HEIGHT || 0; // So there will be a value for any case\n  // statusBarHeight = isIOS ? 20 : StatusBarManager.HEIGHT;\n  // if (isIOS) {\n  //   // override guesstimate height with the actual height from StatusBarManager\n  //   StatusBarManager.getHeight((data: any) => (statusBarHeight = data.height));\n  // }\n}\nfunction getAspectRatio() {\n  return screenWidth < screenHeight ? screenHeight / screenWidth : screenWidth / screenHeight;\n}\nfunction getOrientation(height, width) {\n  return width < height ? orientations.PORTRAIT : orientations.LANDSCAPE;\n}\nexport function updateConstants(dimensions) {\n  screenHeight = dimensions.screen.height;\n  screenWidth = dimensions.screen.width;\n  windowWidth = dimensions.window.width;\n  windowHeight = dimensions.window.height;\n  setStatusBarHeight();\n}\nconst accessibility = {\n  isScreenReaderEnabled: false\n};\nfunction handleScreenReaderChanged(isScreenReaderEnabled) {\n  accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n}\nAccessibilityInfo.addEventListener('screenReaderChanged', handleScreenReaderChanged);\nfunction setAccessibility() {\n  AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {\n    accessibility.isScreenReaderEnabled = isScreenReaderEnabled;\n  });\n}\nsetAccessibility();\nconst constants = {\n  /* Platform */\n  orientations,\n  isAndroid,\n  isIOS,\n  isWeb,\n  getAndroidVersion: () => {\n    return isAndroid ? parseInt(Platform.Version, 10) : undefined;\n  },\n  /* Navigation */\n  get statusBarHeight() {\n    return statusBarHeight;\n  },\n  /* Layout */\n  isRTL: I18nManager.isRTL,\n  get orientation() {\n    return getOrientation(windowHeight, windowWidth);\n  },\n  get isLandscape() {\n    return getOrientation(windowHeight, windowWidth) === orientations.LANDSCAPE;\n  },\n  get screenWidth() {\n    return screenWidth;\n  },\n  get screenHeight() {\n    return screenHeight;\n  },\n  get windowWidth() {\n    return windowWidth;\n  },\n  get windowHeight() {\n    return windowHeight;\n  },\n  get isSmallWindow() {\n    return windowWidth <= 340;\n  },\n  get isSmallScreen() {\n    return screenWidth <= 340;\n  },\n  get isShortScreen() {\n    return screenHeight <= 600;\n  },\n  get isWideScreen() {\n    return isTablet && !isSubWindow || this.isLandscape;\n  },\n  get screenAspectRatio() {\n    return getAspectRatio();\n  },\n  get isTablet() {\n    return isTablet;\n  },\n  set isTablet(value) {\n    isTablet = value;\n  },\n  setBreakpoints(value, options) {\n    breakpoints = value.sort(breakpointComparator);\n    if (options) {\n      defaultMargin = options.defaultMargin;\n    }\n  },\n  getPageMargins() {\n    if (!breakpoints) {\n      return 0;\n    }\n    for (let i = breakpoints.length - 1; i >= 0; --i) {\n      if (windowWidth > breakpoints[i].breakpoint) {\n        return breakpoints[i].pageMargin;\n      }\n    }\n    return defaultMargin;\n  },\n  getSafeAreaInsets: () => {\n    const orientation = getOrientation(screenHeight, screenWidth);\n    return orientation === orientations.LANDSCAPE ? {\n      left: 44,\n      right: 44,\n      bottom: 24,\n      top: 0\n    } : {\n      left: 0,\n      right: 0,\n      bottom: 34,\n      top: 44\n    };\n  },\n  /* Devices */\n  get isIphoneX() {\n    return isIOS &&\n    //@ts-ignore\n    !Platform.isPad &&\n    //@ts-ignore\n    !Platform.isTVOS && (screenHeight >= 812 || screenWidth >= 812);\n  },\n  /* Orientation */\n  dimensionsEventListener: undefined,\n  addDimensionsEventListener: callback => {\n    return Dimensions.addEventListener('change', callback);\n  },\n  /* Dimensions */\n  removeDimensionsEventListener: callback => {\n    if (callback.remove) {\n      callback.remove();\n    }\n  },\n  /* Accessibility */\n  get accessibility() {\n    return accessibility;\n  },\n  /* Keyboard */\n  backspaceKey: 'Backspace',\n  enterKey: 'Enter'\n};\nsetStatusBarHeight();\nDimensions.addEventListener('change', updateConstants);\nexport default constants;\n\n// For tests\nexport const _reset = () => {\n  // @ts-ignore\n  breakpoints = undefined;\n  defaultMargin = 0;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}