{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"modifiers\", \"style\", \"disabled\", \"forwardedRef\", \"feedbackColor\", \"activeOpacity\", \"activeScale\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, interpolate, interpolateColor, runOnJS } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nimport View from \"../components/view\";\nimport { Colors } from \"../../src/style\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction TouchableOpacity(props) {\n  var children = props.children,\n    modifiers = props.modifiers,\n    style = props.style,\n    disabled = props.disabled,\n    forwardedRef = props.forwardedRef,\n    feedbackColor = props.feedbackColor,\n    _props$activeOpacity = props.activeOpacity,\n    activeOpacity = _props$activeOpacity === void 0 ? 0.2 : _props$activeOpacity,\n    _props$activeScale = props.activeScale,\n    activeScale = _props$activeScale === void 0 ? 1 : _props$activeScale,\n    others = _objectWithoutProperties(props, _excluded);\n  var borderRadius = modifiers.borderRadius,\n    paddings = modifiers.paddings,\n    margins = modifiers.margins,\n    alignments = modifiers.alignments,\n    flexStyle = modifiers.flexStyle;\n  var isActive = useSharedValue(0);\n  var isLongPressed = useSharedValue(false);\n  var backgroundColor = useMemo(function () {\n    return props.backgroundColor || modifiers.backgroundColor || Colors.transparent;\n  }, [props.backgroundColor, modifiers.backgroundColor]);\n  var onPress = useCallback(function () {\n    props.onPress == null ? void 0 : props.onPress(props);\n  }, [props.onPress, props.customValue]);\n  var onLongPress = useCallback(function () {\n    props.onLongPress == null ? void 0 : props.onLongPress(props);\n  }, [props.onLongPress, props.customValue]);\n  var toggleActive = function toggleActive(value) {\n    'worklet';\n\n    isActive.value = withTiming(value, {\n      duration: 200\n    });\n  };\n  var tapGestureHandler = useAnimatedGestureHandler({\n    onStart: function onStart() {\n      toggleActive(1);\n    },\n    onEnd: function onEnd() {\n      toggleActive(0);\n      runOnJS(onPress)();\n    },\n    onFail: function onFail() {\n      if (!isLongPressed.value) {\n        toggleActive(0);\n      }\n    }\n  });\n  var longPressGestureHandler = useAnimatedGestureHandler({\n    onActive: function onActive() {\n      if (!isLongPressed.value) {\n        isLongPressed.value = true;\n        runOnJS(onLongPress)();\n      }\n    },\n    onFinish: function onFinish() {\n      toggleActive(0);\n      isLongPressed.value = false;\n    }\n  });\n  var animatedStyle = useAnimatedStyle(function () {\n    var activeColor = feedbackColor || backgroundColor;\n    var opacity = interpolate(isActive.value, [0, 1], [1, activeOpacity]);\n    var scale = interpolate(isActive.value, [0, 1], [1, activeScale]);\n    return {\n      backgroundColor: !feedbackColor ? backgroundColor : interpolateColor(isActive.value, [0, 1], [backgroundColor, activeColor]),\n      opacity: opacity,\n      transform: [{\n        scale: scale\n      }]\n    };\n  }, [backgroundColor, feedbackColor]);\n  var Container = props.onLongPress ? LongPressGestureHandler : View;\n  return _jsx(TapGestureHandler, {\n    onGestureEvent: tapGestureHandler,\n    shouldCancelWhenOutside: true,\n    enabled: !disabled,\n    children: _jsx(Reanimated.View, {\n      children: _jsx(Container, {\n        onGestureEvent: longPressGestureHandler,\n        shouldCancelWhenOutside: true,\n        children: _jsx(Reanimated.View, _objectSpread(_objectSpread({}, others), {}, {\n          ref: forwardedRef,\n          style: [borderRadius && {\n            borderRadius: borderRadius\n          }, flexStyle, paddings, margins, alignments, {\n            backgroundColor: backgroundColor\n          }, style, animatedStyle],\n          children: children\n        }))\n      })\n    })\n  });\n}\nTouchableOpacity.displayName = 'Incubator.TouchableOpacity';\nexport default asBaseComponent(forwardRef(TouchableOpacity));","map":{"version":3,"names":["React","useCallback","useMemo","Reanimated","useAnimatedGestureHandler","useAnimatedStyle","useSharedValue","withTiming","interpolate","interpolateColor","runOnJS","TapGestureHandler","LongPressGestureHandler","asBaseComponent","forwardRef","View","Colors","jsx","_jsx","TouchableOpacity","props","children","modifiers","style","disabled","forwardedRef","feedbackColor","_props$activeOpacity","activeOpacity","_props$activeScale","activeScale","others","_objectWithoutProperties","_excluded","borderRadius","paddings","margins","alignments","flexStyle","isActive","isLongPressed","backgroundColor","transparent","onPress","customValue","onLongPress","toggleActive","value","duration","tapGestureHandler","onStart","onEnd","onFail","longPressGestureHandler","onActive","onFinish","animatedStyle","activeColor","opacity","scale","transform","Container","onGestureEvent","shouldCancelWhenOutside","enabled","_objectSpread","ref","displayName"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/incubator/TouchableOpacity.js"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport Reanimated, { useAnimatedGestureHandler, useAnimatedStyle, useSharedValue, withTiming, interpolate, interpolateColor, runOnJS } from 'react-native-reanimated';\nimport { TapGestureHandler, LongPressGestureHandler } from 'react-native-gesture-handler';\nimport { asBaseComponent, forwardRef } from \"../commons/new\";\nimport View from \"../components/view\";\nimport { Colors } from \"../../src/style\";\n/**\n * @description: a Better, enhanced TouchableOpacity component\n * @modifiers: flex, margin, padding, background\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TouchableOpacityScreen.js\n */\nfunction TouchableOpacity(props) {\n  const {\n    children,\n    modifiers,\n    style,\n    disabled,\n    forwardedRef,\n    feedbackColor,\n    activeOpacity = 0.2,\n    activeScale = 1,\n    ...others\n  } = props;\n  const {\n    borderRadius,\n    paddings,\n    margins,\n    alignments,\n    flexStyle\n  } = modifiers;\n  const isActive = useSharedValue(0);\n  /* This flag is for fixing an issue with long press triggering twice\n  TODO: Consider revisiting this issue to see if it still occurs */\n  const isLongPressed = useSharedValue(false);\n  const backgroundColor = useMemo(() => {\n    return props.backgroundColor || modifiers.backgroundColor || Colors.transparent;\n  }, [props.backgroundColor, modifiers.backgroundColor]);\n  const onPress = useCallback(() => {\n    props.onPress?.(props);\n  }, [props.onPress, props.customValue]);\n  const onLongPress = useCallback(() => {\n    props.onLongPress?.(props);\n  }, [props.onLongPress, props.customValue]);\n  const toggleActive = value => {\n    'worklet';\n\n    isActive.value = withTiming(value, {\n      duration: 200\n    });\n  };\n  const tapGestureHandler = useAnimatedGestureHandler({\n    onStart: () => {\n      toggleActive(1);\n    },\n    onEnd: () => {\n      toggleActive(0);\n      runOnJS(onPress)();\n    },\n    onFail: () => {\n      if (!isLongPressed.value) {\n        toggleActive(0);\n      }\n    }\n  });\n  const longPressGestureHandler = useAnimatedGestureHandler({\n    onActive: () => {\n      if (!isLongPressed.value) {\n        isLongPressed.value = true;\n        runOnJS(onLongPress)();\n      }\n    },\n    onFinish: () => {\n      toggleActive(0);\n      isLongPressed.value = false;\n    }\n  });\n\n  // @ts-expect-error should be fixed in version 3.5 (https://github.com/software-mansion/react-native-reanimated/pull/4881)\n  const animatedStyle = useAnimatedStyle(() => {\n    const activeColor = feedbackColor || backgroundColor;\n    const opacity = interpolate(isActive.value, [0, 1], [1, activeOpacity]);\n    const scale = interpolate(isActive.value, [0, 1], [1, activeScale]);\n    return {\n      backgroundColor: !feedbackColor ? backgroundColor : interpolateColor(isActive.value, [0, 1], [backgroundColor, activeColor]),\n      opacity,\n      transform: [{\n        scale\n      }]\n    };\n  }, [backgroundColor, feedbackColor]);\n  const Container = props.onLongPress ? LongPressGestureHandler : View;\n  return <TapGestureHandler onGestureEvent={tapGestureHandler} shouldCancelWhenOutside enabled={!disabled}>\n      <Reanimated.View>\n        <Container onGestureEvent={longPressGestureHandler} shouldCancelWhenOutside>\n          <Reanimated.View {...others} ref={forwardedRef} style={[borderRadius && {\n          borderRadius\n        }, flexStyle, paddings, margins, alignments, {\n          backgroundColor\n        }, style, animatedStyle]}>\n            {children}\n          </Reanimated.View>\n        </Container>\n      </Reanimated.View>\n    </TapGestureHandler>;\n}\nTouchableOpacity.displayName = 'Incubator.TouchableOpacity';\nexport default asBaseComponent(forwardRef(TouchableOpacity));"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}