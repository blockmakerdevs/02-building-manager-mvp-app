{"ast":null,"code":"import get from 'lodash/get';\nimport Assets from \"../assets\";\nimport { Constants } from \"../commons/new\";\nexport function isSvgUri(source) {\n  var _source$uri;\n  return typeof source === 'object' && (source == null ? void 0 : (_source$uri = source.uri) == null ? void 0 : _source$uri.endsWith == null ? void 0 : _source$uri.endsWith('.svg'));\n}\nexport function isSvg(source) {\n  return typeof source === 'function' || isSvgUri(source) || Constants.isWeb && isSvgData(source);\n}\nexport function isBase64ImageContent(data) {\n  var base64Content = data.split(',')[1];\n  var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  return base64regex.test(base64Content);\n}\nexport function getAsset() {\n  var assetName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var assetGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return get(Assets, `${assetGroup}.${assetName}`);\n}\nfunction isSvgData(source) {\n  var sourceString = source;\n  return typeof source === 'string' && (sourceString.includes('</svg>') || sourceString.includes('data:image/svg'));\n}","map":{"version":3,"names":["get","Assets","Constants","isSvgUri","source","_source$uri","uri","endsWith","isSvg","isWeb","isSvgData","isBase64ImageContent","data","base64Content","split","base64regex","test","getAsset","assetName","arguments","length","undefined","assetGroup","sourceString","includes"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/utils/imageUtils.js"],"sourcesContent":["import get from 'lodash/get';\nimport Assets from \"../assets\";\nimport { Constants } from \"../commons/new\";\nexport function isSvgUri(source) {\n  // @ts-expect-error\n  return typeof source === 'object' && source?.uri?.endsWith?.('.svg');\n}\nexport function isSvg(source) {\n  return typeof source === 'function' || isSvgUri(source) || Constants.isWeb && isSvgData(source);\n}\nexport function isBase64ImageContent(data) {\n  const base64Content = data.split(',')[1];\n  const base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n  return base64regex.test(base64Content);\n}\nexport function getAsset(assetName = '', assetGroup = '') {\n  return get(Assets, `${assetGroup}.${assetName}`);\n}\nfunction isSvgData(source) {\n  const sourceString = source;\n  return typeof source === 'string' && (sourceString.includes('</svg>') || sourceString.includes('data:image/svg'));\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAC5B,OAAOC,MAAM;AACb,SAASC,SAAS;AAClB,OAAO,SAASC,QAAQA,CAACC,MAAM,EAAE;EAAA,IAAAC,WAAA;EAE/B,OAAO,OAAOD,MAAM,KAAK,QAAQ,KAAIA,MAAM,qBAAAC,WAAA,GAAND,MAAM,CAAEE,GAAG,qBAAXD,WAAA,CAAaE,QAAQ,oBAArBF,WAAA,CAAaE,QAAQ,CAAG,MAAM,CAAC;AACtE;AACA,OAAO,SAASC,KAAKA,CAACJ,MAAM,EAAE;EAC5B,OAAO,OAAOA,MAAM,KAAK,UAAU,IAAID,QAAQ,CAACC,MAAM,CAAC,IAAIF,SAAS,CAACO,KAAK,IAAIC,SAAS,CAACN,MAAM,CAAC;AACjG;AACA,OAAO,SAASO,oBAAoBA,CAACC,IAAI,EAAE;EACzC,IAAMC,aAAa,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACxC,IAAMC,WAAW,GAAG,kEAAkE;EACtF,OAAOA,WAAW,CAACC,IAAI,CAACH,aAAa,CAAC;AACxC;AACA,OAAO,SAASI,QAAQA,CAAA,EAAkC;EAAA,IAAjCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,UAAU,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACtD,OAAOnB,GAAG,CAACC,MAAM,EAAG,GAAEqB,UAAW,IAAGJ,SAAU,EAAC,CAAC;AAClD;AACA,SAASR,SAASA,CAACN,MAAM,EAAE;EACzB,IAAMmB,YAAY,GAAGnB,MAAM;EAC3B,OAAO,OAAOA,MAAM,KAAK,QAAQ,KAAKmB,YAAY,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAID,YAAY,CAACC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;AACnH"},"metadata":{},"sourceType":"module","externalDependencies":[]}