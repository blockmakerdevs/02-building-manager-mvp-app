{"ast":null,"code":"import _toUpper from \"lodash/toUpper\";\nimport { Colors } from \"../../style\";\nexport var BORDER_RADIUS = 12;\nexport function getColorValue(color) {\n  if (!color) {\n    return;\n  }\n  return color.replace('#', '');\n}\nexport function getHexColor(text) {\n  if (!Colors.isTransparent(text)) {\n    var trimmed = text.replace(/\\s+/g, '');\n    var hex = `#${trimmed}`;\n    return hex;\n  }\n  return text;\n}\nexport function getValidColorString(text) {\n  if (text) {\n    var hex = getHexColor(text);\n    if (Colors.isValidHex(hex)) {\n      return {\n        hex: hex,\n        valid: true\n      };\n    }\n  }\n  return {\n    undefined: undefined,\n    valid: false\n  };\n}\nexport function getHexString(color) {\n  return _toUpper(Colors.getHexString(color));\n}\nexport function getTextColor(color) {\n  return Colors.isDark(color) ? Colors.white : Colors.grey10;\n}","map":{"version":3,"names":["_toUpper","Colors","BORDER_RADIUS","getColorValue","color","replace","getHexColor","text","isTransparent","trimmed","hex","getValidColorString","isValidHex","valid","undefined","getHexString","getTextColor","isDark","white","grey10"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/colorPicker/ColorPickerPresenter.js"],"sourcesContent":["import _toUpper from \"lodash/toUpper\";\nimport { Colors } from \"../../style\";\nexport const BORDER_RADIUS = 12;\nexport function getColorValue(color) {\n  if (!color) {\n    return;\n  }\n  return color.replace('#', '');\n}\nexport function getHexColor(text) {\n  if (!Colors.isTransparent(text)) {\n    const trimmed = text.replace(/\\s+/g, '');\n    const hex = `#${trimmed}`;\n    return hex;\n  }\n  return text;\n}\nexport function getValidColorString(text) {\n  if (text) {\n    const hex = getHexColor(text);\n    if (Colors.isValidHex(hex)) {\n      return {\n        hex,\n        valid: true\n      };\n    }\n  }\n  return {\n    undefined,\n    valid: false\n  };\n}\nexport function getHexString(color) {\n  return _toUpper(Colors.getHexString(color));\n}\nexport function getTextColor(color) {\n  return Colors.isDark(color) ? Colors.white : Colors.grey10;\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,gBAAgB;AACrC,SAASC,MAAM;AACf,OAAO,IAAMC,aAAa,GAAG,EAAE;AAC/B,OAAO,SAASC,aAAaA,CAACC,KAAK,EAAE;EACnC,IAAI,CAACA,KAAK,EAAE;IACV;EACF;EACA,OAAOA,KAAK,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;AAC/B;AACA,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAE;EAChC,IAAI,CAACN,MAAM,CAACO,aAAa,CAACD,IAAI,CAAC,EAAE;IAC/B,IAAME,OAAO,GAAGF,IAAI,CAACF,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IACxC,IAAMK,GAAG,GAAI,IAAGD,OAAQ,EAAC;IACzB,OAAOC,GAAG;EACZ;EACA,OAAOH,IAAI;AACb;AACA,OAAO,SAASI,mBAAmBA,CAACJ,IAAI,EAAE;EACxC,IAAIA,IAAI,EAAE;IACR,IAAMG,GAAG,GAAGJ,WAAW,CAACC,IAAI,CAAC;IAC7B,IAAIN,MAAM,CAACW,UAAU,CAACF,GAAG,CAAC,EAAE;MAC1B,OAAO;QACLA,GAAG,EAAHA,GAAG;QACHG,KAAK,EAAE;MACT,CAAC;IACH;EACF;EACA,OAAO;IACLC,SAAS,EAATA,SAAS;IACTD,KAAK,EAAE;EACT,CAAC;AACH;AACA,OAAO,SAASE,YAAYA,CAACX,KAAK,EAAE;EAClC,OAAOJ,QAAQ,CAACC,MAAM,CAACc,YAAY,CAACX,KAAK,CAAC,CAAC;AAC7C;AACA,OAAO,SAASY,YAAYA,CAACZ,KAAK,EAAE;EAClC,OAAOH,MAAM,CAACgB,MAAM,CAACb,KAAK,CAAC,GAAGH,MAAM,CAACiB,KAAK,GAAGjB,MAAM,CAACkB,MAAM;AAC5D"},"metadata":{},"sourceType":"module","externalDependencies":[]}