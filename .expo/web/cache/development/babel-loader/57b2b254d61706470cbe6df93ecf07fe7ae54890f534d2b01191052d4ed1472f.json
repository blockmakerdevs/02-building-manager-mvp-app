{"ast":null,"code":"import _isUndefined from \"lodash/isUndefined\";\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../text\";\nimport FieldContext from \"./FieldContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar CharCounter = function CharCounter(_ref) {\n  var _value$length;\n  var maxLength = _ref.maxLength,\n    charCounterStyle = _ref.charCounterStyle,\n    testID = _ref.testID;\n  var _useContext = useContext(FieldContext),\n    value = _useContext.value;\n  var length = (_value$length = value == null ? void 0 : value.length) != null ? _value$length : 0;\n  if (_isUndefined(maxLength)) {\n    return null;\n  }\n  return _jsx(Text, {\n    $textNeutral: true,\n    style: [styles.container, charCounterStyle],\n    recorderTag: 'unmask',\n    testID: testID,\n    children: `${length}/${maxLength}`\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    textAlign: 'right'\n  }\n});\nCharCounter.displayName = 'Incubator.TextField';\nexport default CharCounter;","map":{"version":3,"names":["_isUndefined","React","useContext","StyleSheet","Text","FieldContext","jsx","_jsx","CharCounter","_ref","_value$length","maxLength","charCounterStyle","testID","_useContext","value","length","$textNeutral","style","styles","container","recorderTag","children","create","flexGrow","textAlign","displayName"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/textField/CharCounter.js"],"sourcesContent":["import _isUndefined from \"lodash/isUndefined\";\nimport React, { useContext } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Text from \"../text\";\nimport FieldContext from \"./FieldContext\";\nconst CharCounter = ({\n  maxLength,\n  charCounterStyle,\n  testID\n}) => {\n  const {\n    value\n  } = useContext(FieldContext);\n  const length = value?.length ?? 0;\n  if (_isUndefined(maxLength)) {\n    return null;\n  }\n  return <Text $textNeutral style={[styles.container, charCounterStyle]} recorderTag={'unmask'} testID={testID}>\n      {`${length}/${maxLength}`}\n    </Text>;\n};\nconst styles = StyleSheet.create({\n  container: {\n    flexGrow: 1,\n    textAlign: 'right'\n  }\n});\nCharCounter.displayName = 'Incubator.TextField';\nexport default CharCounter;"],"mappings":"AAAA,OAAOA,YAAY,MAAM,oBAAoB;AAC7C,OAAOC,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAE1C,OAAOC,IAAI;AACX,OAAOC,YAAY;AAAuB,SAAAC,GAAA,IAAAC,IAAA;AAC1C,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAAC,IAAA,EAIX;EAAA,IAAAC,aAAA;EAAA,IAHJC,SAAS,GAAAF,IAAA,CAATE,SAAS;IACTC,gBAAgB,GAAAH,IAAA,CAAhBG,gBAAgB;IAChBC,MAAM,GAAAJ,IAAA,CAANI,MAAM;EAEN,IAAAC,WAAA,GAEIZ,UAAU,CAACG,YAAY,CAAC;IAD1BU,KAAK,GAAAD,WAAA,CAALC,KAAK;EAEP,IAAMC,MAAM,IAAAN,aAAA,GAAGK,KAAK,oBAALA,KAAK,CAAEC,MAAM,YAAAN,aAAA,GAAI,CAAC;EACjC,IAAIV,YAAY,CAACW,SAAS,CAAC,EAAE;IAC3B,OAAO,IAAI;EACb;EACA,OAAOJ,IAAA,CAACH,IAAI;IAACa,YAAY;IAACC,KAAK,EAAE,CAACC,MAAM,CAACC,SAAS,EAAER,gBAAgB,CAAE;IAACS,WAAW,EAAE,QAAS;IAACR,MAAM,EAAEA,MAAO;IAAAS,QAAA,EACvG,GAAEN,MAAO,IAAGL,SAAU;EAAC,CACrB,CAAC;AACX,CAAC;AACD,IAAMQ,MAAM,GAAGhB,UAAU,CAACoB,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE;EACb;AACF,CAAC,CAAC;AACFjB,WAAW,CAACkB,WAAW,GAAG,qBAAqB;AAC/C,eAAelB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}