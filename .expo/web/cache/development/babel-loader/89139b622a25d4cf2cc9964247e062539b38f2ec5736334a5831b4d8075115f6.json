{"ast":null,"code":"import _isNil from \"lodash/isNil\";\nimport _toString from \"lodash/toString\";\nexport function formatLastItemLabel(label, options) {\n  var _ref = options || {},\n    _ref$shouldAddPlus = _ref.shouldAddPlus,\n    shouldAddPlus = _ref$shouldAddPlus === void 0 ? true : _ref$shouldAddPlus,\n    maxPlusLimit = _ref.maxPlusLimit;\n  if (typeof label !== 'number') {\n    return label;\n  }\n  var formattedLabel;\n  var roundedNumber = _toString(Math.round(label));\n  if (label < 1000) {\n    formattedLabel = `${label}`;\n  } else if (label >= 10000000) {\n    formattedLabel = `${roundedNumber.slice(0, -6)}m`;\n  } else if (label >= 1000000) {\n    formattedLabel = `${parseInt(roundedNumber.slice(0, -5)) / 10}m`;\n  } else {\n    formattedLabel = `${roundedNumber.slice(0, -3)}k`;\n  }\n  var isInPlusRange = !_isNil(maxPlusLimit) ? formattedLabel.length <= maxPlusLimit : shouldAddPlus;\n  if (shouldAddPlus && isInPlusRange) {\n    return `+${formattedLabel}`;\n  }\n  return formattedLabel;\n}","map":{"version":3,"names":["_isNil","_toString","formatLastItemLabel","label","options","_ref","_ref$shouldAddPlus","shouldAddPlus","maxPlusLimit","formattedLabel","roundedNumber","Math","round","slice","parseInt","isInPlusRange","length"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/helpers/FormattingPresenter.js"],"sourcesContent":["import _isNil from \"lodash/isNil\";\nimport _toString from \"lodash/toString\";\nexport function formatLastItemLabel(label, options) {\n  const {\n    shouldAddPlus = true,\n    maxPlusLimit\n  } = options || {};\n  if (typeof label !== 'number') {\n    return label;\n  }\n  let formattedLabel;\n  const roundedNumber = _toString(Math.round(label));\n  if (label < 1000) {\n    formattedLabel = `${label}`;\n  } else if (label >= 10000000) {\n    formattedLabel = `${roundedNumber.slice(0, -6)}m`;\n  } else if (label >= 1000000) {\n    formattedLabel = `${parseInt(roundedNumber.slice(0, -5)) / 10}m`;\n  } else {\n    formattedLabel = `${roundedNumber.slice(0, -3)}k`;\n  }\n  const isInPlusRange = !_isNil(maxPlusLimit) ? formattedLabel.length <= maxPlusLimit : shouldAddPlus;\n  if (shouldAddPlus && isInPlusRange) {\n    return `+${formattedLabel}`;\n  }\n  return formattedLabel;\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAO,SAASC,mBAAmBA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAClD,IAAAC,IAAA,GAGID,OAAO,IAAI,CAAC,CAAC;IAAAE,kBAAA,GAAAD,IAAA,CAFfE,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,IAAI,GAAAA,kBAAA;IACpBE,YAAY,GAAAH,IAAA,CAAZG,YAAY;EAEd,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EACA,IAAIM,cAAc;EAClB,IAAMC,aAAa,GAAGT,SAAS,CAACU,IAAI,CAACC,KAAK,CAACT,KAAK,CAAC,CAAC;EAClD,IAAIA,KAAK,GAAG,IAAI,EAAE;IAChBM,cAAc,GAAI,GAAEN,KAAM,EAAC;EAC7B,CAAC,MAAM,IAAIA,KAAK,IAAI,QAAQ,EAAE;IAC5BM,cAAc,GAAI,GAAEC,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,GAAE;EACnD,CAAC,MAAM,IAAIV,KAAK,IAAI,OAAO,EAAE;IAC3BM,cAAc,GAAI,GAAEK,QAAQ,CAACJ,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,EAAG,GAAE;EAClE,CAAC,MAAM;IACLJ,cAAc,GAAI,GAAEC,aAAa,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,GAAE;EACnD;EACA,IAAME,aAAa,GAAG,CAACf,MAAM,CAACQ,YAAY,CAAC,GAAGC,cAAc,CAACO,MAAM,IAAIR,YAAY,GAAGD,aAAa;EACnG,IAAIA,aAAa,IAAIQ,aAAa,EAAE;IAClC,OAAQ,IAAGN,cAAe,EAAC;EAC7B;EACA,OAAOA,cAAc;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}