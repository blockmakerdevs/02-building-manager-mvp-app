{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport { Constants } from \"../../commons/new\";\nimport { HapticService, HapticType } from \"../../services\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DRAG_TOSS = 0.05;\nvar LEFT_TOGGLE_THRESHOLD = 0.6;\nif (!Math.sign) {\n  Math.sign = function (x) {\n    return Number(x > 0) - Number(x < 0) || +x;\n  };\n}\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n  function Swipeable(props) {\n    var _this;\n    _classCallCheck(this, Swipeable);\n    _this = _callSuper(this, Swipeable, [props]);\n    _this._triggerHaptic = function () {\n      return !_this.props.disableHaptic && HapticService.triggerHaptic(HapticType.impactMedium, 'Drawer');\n    };\n    _this._handleDrag = function (e) {\n      var onToggleSwipeLeft = _this.props.onToggleSwipeLeft;\n      if (onToggleSwipeLeft) {\n        var _this$state = _this.state,\n          rowWidth = _this$state.rowWidth,\n          leftWidth = _this$state.leftWidth;\n        var x = e.nativeEvent.translationX;\n        var threshold = rowWidth * LEFT_TOGGLE_THRESHOLD;\n        if (!_this.dragThresholdReached && x >= threshold && x < threshold + 10) {\n          _this.dragThresholdReached = true;\n          _this._triggerHaptic();\n          onToggleSwipeLeft({\n            rowWidth: rowWidth,\n            leftWidth: leftWidth,\n            dragX: x\n          });\n        }\n        if (_this.dragThresholdReached && x < threshold - 10) {\n          _this.dragThresholdReached = false;\n          onToggleSwipeLeft({\n            rowWidth: rowWidth,\n            leftWidth: leftWidth,\n            dragX: x,\n            resetItemPosition: true\n          });\n        }\n      }\n    };\n    _this.getTransX = function () {\n      var _this$props = _this.props,\n        friction = _this$props.friction,\n        overshootFriction = _this$props.overshootFriction;\n      var _this$state2 = _this.state,\n        dragX = _this$state2.dragX,\n        rowTranslation = _this$state2.rowTranslation,\n        _this$state2$leftWidt = _this$state2.leftWidth,\n        leftWidth = _this$state2$leftWidt === void 0 ? 0 : _this$state2$leftWidt,\n        _this$state2$rowWidth = _this$state2.rowWidth,\n        rowWidth = _this$state2$rowWidth === void 0 ? 0 : _this$state2$rowWidth;\n      var _this$state$rightOffs = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _this$props2 = _this.props,\n        _this$props2$overshoo = _this$props2.overshootLeft,\n        overshootLeft = _this$props2$overshoo === void 0 ? leftWidth > 0 : _this$props2$overshoo,\n        _this$props2$overshoo2 = _this$props2.overshootRight,\n        overshootRight = _this$props2$overshoo2 === void 0 ? rightWidth > 0 : _this$props2$overshoo2;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      return transX;\n    };\n    _this.getShowLeftAction = function () {\n      var transX = _this.getTransX();\n      var _this$state$leftWidth = _this.state.leftWidth,\n        leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth;\n      var showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      return showLeftAction;\n    };\n    _this.getLeftActionTranslate = function () {\n      var showLeftAction = _this.getShowLeftAction();\n      var leftActionTranslate = showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      return leftActionTranslate;\n    };\n    _this.getShowRightAction = function () {\n      var transX = _this.getTransX();\n      var _this$state$rowWidth = _this.state.rowWidth,\n        rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      return showRightAction;\n    };\n    _this.getRightActionTranslate = function () {\n      var showRightAction = _this.getShowRightAction();\n      var rightActionTranslate = showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      return rightActionTranslate;\n    };\n    _this._onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      if (_this.rowState !== 0) {\n        if (nativeEvent.oldState === State.ACTIVE) {\n          _this.close();\n        }\n      }\n    };\n    _this._onHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      }\n      if (nativeEvent.state === State.ACTIVE) {\n        _this.props.onDragStart && _this.props.onDragStart(_this.props);\n      }\n    };\n    _this._hasLeftActions = _this.props.renderLeftActions !== undefined;\n    _this._hasRightActions = _this.props.renderRightActions !== undefined;\n    _this._handleRelease = function (nativeEvent) {\n      var velocityX = nativeEvent.velocityX,\n        dragX = nativeEvent.translationX;\n      var _this$state3 = _this.state,\n        _this$state3$leftWidt = _this$state3.leftWidth,\n        leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n        _this$state3$rowWidth = _this$state3.rowWidth,\n        rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props3 = _this.props,\n        fullSwipeLeft = _this$props3.fullSwipeLeft,\n        fullSwipeRight = _this$props3.fullSwipeRight,\n        friction = _this$props3.friction,\n        _this$props3$leftThre = _this$props3.leftThreshold,\n        leftThreshold = _this$props3$leftThre === void 0 ? leftWidth / 2 : _this$props3$leftThre,\n        _this$props3$rightThr = _this$props3.rightThreshold,\n        rightThreshold = _this$props3$rightThr === void 0 ? rightWidth / 2 : _this$props3$rightThr,\n        fullLeftThreshold = _this$props3.fullLeftThreshold,\n        fullRightThreshold = _this$props3.fullRightThreshold,\n        onToggleSwipeLeft = _this$props3.onToggleSwipeLeft;\n      var startOffsetX = _this._currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n      if (_this.rowState === 0) {\n        if (Constants.isRTL && _this._hasLeftActions && onToggleSwipeLeft && translationX < -(rowWidth * LEFT_TOGGLE_THRESHOLD) && !_this.dragThresholdReached) {\n          toValue = -(rowWidth * LEFT_TOGGLE_THRESHOLD);\n        } else if (_this._hasLeftActions && onToggleSwipeLeft && translationX > rowWidth * LEFT_TOGGLE_THRESHOLD && !_this.dragThresholdReached) {\n          toValue = rowWidth * LEFT_TOGGLE_THRESHOLD;\n        } else if (!onToggleSwipeLeft && fullSwipeLeft && translationX > rowWidth * fullLeftThreshold) {\n          _this._triggerHaptic();\n          toValue = rowWidth;\n        } else if (_this._hasRightActions && fullSwipeRight && translationX < -rowWidth * fullRightThreshold) {\n          _this._triggerHaptic();\n          toValue = -rowWidth;\n        } else if (_this._hasLeftActions && translationX > leftThreshold) {\n          if (!onToggleSwipeLeft || onToggleSwipeLeft && translationX < rowWidth * LEFT_TOGGLE_THRESHOLD) {\n            toValue = leftWidth;\n          }\n        } else if (_this._hasRightActions && translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (_this.rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n      _this._animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n    _this._animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state4 = _this.state,\n        dragX = _this$state4.dragX,\n        rowTranslation = _this$state4.rowTranslation,\n        rowWidth = _this$state4.rowWidth,\n        leftWidth = _this$state4.leftWidth;\n      var _this$props4 = _this.props,\n        useNativeAnimations = _this$props4.useNativeAnimations,\n        animationOptions = _this$props4.animationOptions,\n        onSwipeableLeftOpen = _this$props4.onSwipeableLeftOpen,\n        onSwipeableRightOpen = _this$props4.onSwipeableRightOpen,\n        onSwipeableClose = _this$props4.onSwipeableClose,\n        onSwipeableOpen = _this$props4.onSwipeableOpen,\n        onSwipeableLeftWillOpen = _this$props4.onSwipeableLeftWillOpen,\n        onSwipeableRightWillOpen = _this$props4.onSwipeableRightWillOpen,\n        onSwipeableWillClose = _this$props4.onSwipeableWillClose,\n        onSwipeableWillOpen = _this$props4.onSwipeableWillOpen,\n        onFullSwipeLeft = _this$props4.onFullSwipeLeft,\n        onToggleSwipeLeft = _this$props4.onToggleSwipeLeft,\n        onWillFullSwipeLeft = _this$props4.onWillFullSwipeLeft,\n        onFullSwipeRight = _this$props4.onFullSwipeRight,\n        onWillFullSwipeRight = _this$props4.onWillFullSwipeRight;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      _this.rowState = Math.sign(toValue);\n      Animated.spring(rowTranslation, _objectSpread({\n        toValue: toValue,\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        useNativeDriver: useNativeAnimations\n      }, animationOptions)).start(function (_ref3) {\n        var finished = _ref3.finished;\n        if (finished) {\n          if (toValue === rowWidth && onFullSwipeLeft) {\n            onFullSwipeLeft();\n          } else if (toValue === -rowWidth && onFullSwipeRight) {\n            onFullSwipeRight();\n          } else if (toValue > 0 && onSwipeableLeftOpen) {\n            onSwipeableLeftOpen();\n          } else if (toValue < 0 && onSwipeableRightOpen) {\n            onSwipeableRightOpen();\n          }\n          if (toValue === 0) {\n            onSwipeableClose && onSwipeableClose();\n          } else {\n            onSwipeableOpen && onSwipeableOpen();\n          }\n        }\n      });\n      if (Constants.isRTL && _this._hasLeftActions && onToggleSwipeLeft && (toValue === -(rowWidth * LEFT_TOGGLE_THRESHOLD) || _this.dragThresholdReached)) {\n        onToggleSwipeLeft({\n          rowWidth: rowWidth,\n          leftWidth: leftWidth,\n          released: true,\n          triggerHaptic: !_this.dragThresholdReached\n        });\n      } else if (_this._hasLeftActions && onToggleSwipeLeft && (toValue === rowWidth * LEFT_TOGGLE_THRESHOLD || _this.dragThresholdReached)) {\n        onToggleSwipeLeft({\n          rowWidth: rowWidth,\n          leftWidth: leftWidth,\n          released: true,\n          triggerHaptic: !_this.dragThresholdReached\n        });\n        _this.dragThresholdReached = false;\n      } else if (toValue === rowWidth && onWillFullSwipeLeft) {\n        onWillFullSwipeLeft();\n      } else if (toValue === -rowWidth && onWillFullSwipeRight) {\n        onWillFullSwipeRight();\n      } else if (toValue > 0 && onSwipeableLeftWillOpen) {\n        onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && onSwipeableRightWillOpen) {\n        onSwipeableRightWillOpen();\n      }\n      if (toValue === 0) {\n        onSwipeableWillClose && onSwipeableWillClose();\n      } else {\n        onSwipeableWillOpen && onSwipeableWillOpen();\n      }\n    };\n    _this._currentOffset = function () {\n      var _this$state5 = _this.state,\n        _this$state5$leftWidt = _this$state5.leftWidth,\n        leftWidth = _this$state5$leftWidt === void 0 ? 0 : _this$state5$leftWidt,\n        _this$state5$rowWidth = _this$state5.rowWidth,\n        rowWidth = _this$state5$rowWidth === void 0 ? 0 : _this$state5$rowWidth;\n      var _this$state$rightOffs4 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs4 === void 0 ? rowWidth : _this$state$rightOffs4;\n      var rightWidth = rowWidth - rightOffset;\n      if (_this.rowState === 1) {\n        return leftWidth;\n      } else if (_this.rowState === -1) {\n        return -rightWidth;\n      }\n      return 0;\n    };\n    _this.close = function () {\n      _this._animateRow(_this._currentOffset(), 0);\n    };\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n        leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n      _this._animateRow(_this._currentOffset(), leftWidth);\n    };\n    _this.openLeftFull = function () {\n      if (_this._hasLeftActions) {\n        var rowWidth = _this.state.rowWidth;\n        _this._animateRow(_this._currentOffset(), rowWidth);\n      }\n    };\n    _this.toggleLeft = function () {\n      var shouldAnimate = Constants.isRTL ? _this._hasRightActions : _this._hasLeftActions;\n      if (shouldAnimate) {\n        var rowWidth = _this.state.rowWidth;\n        _this._animateRow(_this._currentOffset(), rowWidth * LEFT_TOGGLE_THRESHOLD * (Constants.isRTL ? -1 : 1));\n      }\n    };\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n        rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs5 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs5 === void 0 ? rowWidth : _this$state$rightOffs5;\n      var rightWidth = rowWidth - rightOffset;\n      _this._animateRow(_this._currentOffset(), -rightWidth);\n    };\n    _this.openRightFull = function () {\n      if (_this._hasRightActions) {\n        var rowWidth = _this.state.rowWidth;\n        _this._animateRow(_this._currentOffset(), -rowWidth);\n      }\n    };\n    _this._onRowLayout = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      return _this.handleMeasure('rowWidth', nativeEvent);\n    };\n    _this._onLeftLayout = function (_ref5) {\n      var nativeEvent = _ref5.nativeEvent;\n      return _this.handleMeasure('leftWidth', nativeEvent);\n    };\n    _this._onRightLayout = function (_ref6) {\n      var nativeEvent = _ref6.nativeEvent;\n      return _this.handleMeasure('rightOffset', nativeEvent);\n    };\n    _this.handleMeasure = function (name, nativeEvent) {\n      var _nativeEvent$layout = nativeEvent.layout,\n        width = _nativeEvent$layout.width,\n        x = _nativeEvent$layout.x;\n      switch (name) {\n        case 'rowWidth':\n          _this.rowWidth = width;\n          break;\n        case 'leftWidth':\n          _this.leftWidth = x;\n          break;\n        case 'rightOffset':\n          _this.rightOffset = x;\n          break;\n        default:\n          break;\n      }\n      var leftRender = _this._hasLeftActions ? _this.leftWidth : true;\n      var rightRender = _this._hasRightActions ? _this.rightOffset : true;\n      if (_this.rowWidth && leftRender && rightRender) {\n        _this.setState({\n          rowWidth: _this.rowWidth,\n          leftWidth: _this.leftWidth,\n          rightOffset: _this.rightOffset,\n          measureCompleted: true\n        });\n      }\n    };\n    var _dragX = new Animated.Value(0);\n    _this.rowState = 0;\n    _this.dragThresholdReached = false;\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowWidth: Constants.screenWidth,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      measureCompleted: false\n    };\n    _this._onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: props.useNativeAnimations,\n      listener: _this._handleDrag\n    });\n    return _this;\n  }\n  _createClass(Swipeable, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        children = _this$props5.children,\n        renderLeftActions = _this$props5.renderLeftActions,\n        renderRightActions = _this$props5.renderRightActions,\n        leftActionsContainerStyle = _this$props5.leftActionsContainerStyle,\n        rightActionsContainerStyle = _this$props5.rightActionsContainerStyle,\n        containerStyle = _this$props5.containerStyle,\n        childrenContainerStyle = _this$props5.childrenContainerStyle,\n        testID = _this$props5.testID;\n      var left = this._hasLeftActions && _jsxs(Animated.View, {\n        style: [styles.leftActions, leftActionsContainerStyle, {\n          transform: [{\n            translateX: this.getLeftActionTranslate()\n          }]\n        }],\n        children: [renderLeftActions(this.getShowLeftAction(), this.getTransX()), _jsx(View, {\n          onLayout: this._onLeftLayout\n        })]\n      });\n      var right = this._hasRightActions && _jsxs(Animated.View, {\n        style: [styles.rightActions, rightActionsContainerStyle, {\n          transform: [{\n            translateX: this.getRightActionTranslate()\n          }]\n        }],\n        children: [renderRightActions(this.getShowRightAction(), this.getTransX()), _jsx(View, {\n          onLayout: this._onRightLayout\n        })]\n      });\n      return _jsx(PanGestureHandler, _objectSpread(_objectSpread({}, this.props), {}, {\n        activeOffsetX: [-44, 44],\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._onHandlerStateChange,\n        children: _jsxs(Animated.View, {\n          onLayout: this._onRowLayout,\n          style: [styles.container, containerStyle],\n          children: [left, right, _jsx(TapGestureHandler, {\n            onHandlerStateChange: this._onTapHandlerStateChange,\n            children: _jsx(Animated.View, {\n              style: [{\n                transform: [{\n                  translateX: this.getTransX()\n                }]\n              }, childrenContainerStyle],\n              children: children\n            })\n          })]\n        })\n      }));\n    }\n  }]);\n  return Swipeable;\n}(Component);\nSwipeable.displayName = 'IGNORE';\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: false,\n  fullLeftThreshold: 0.45,\n  fullRightThreshold: 0.45\n};\nexport { Swipeable as default };\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","Constants","HapticService","HapticType","jsx","_jsx","jsxs","_jsxs","DRAG_TOSS","LEFT_TOGGLE_THRESHOLD","Math","sign","x","Number","Swipeable","_Component","_inherits","props","_this","_classCallCheck","_callSuper","_triggerHaptic","disableHaptic","triggerHaptic","impactMedium","_handleDrag","e","onToggleSwipeLeft","_this$state","state","rowWidth","leftWidth","nativeEvent","translationX","threshold","dragThresholdReached","dragX","resetItemPosition","getTransX","_this$props","friction","overshootFriction","_this$state2","rowTranslation","_this$state2$leftWidt","_this$state2$rowWidth","_this$state$rightOffs","rightOffset","rightWidth","max","_this$props2","_this$props2$overshoo","overshootLeft","_this$props2$overshoo2","overshootRight","transX","add","interpolate","inputRange","outputRange","getShowLeftAction","_this$state$leftWidth","showLeftAction","Value","getLeftActionTranslate","leftActionTranslate","MIN_VALUE","extrapolate","getShowRightAction","_this$state$rowWidth","_this$state$rightOffs2","showRightAction","getRightActionTranslate","rightActionTranslate","_onTapHandlerStateChange","_ref","rowState","oldState","ACTIVE","close","_onHandlerStateChange","_ref2","_handleRelease","onDragStart","_hasLeftActions","renderLeftActions","undefined","_hasRightActions","renderRightActions","velocityX","_this$state3","_this$state3$leftWidt","_this$state3$rowWidth","_this$state$rightOffs3","_this$props3","fullSwipeLeft","fullSwipeRight","_this$props3$leftThre","leftThreshold","_this$props3$rightThr","rightThreshold","fullLeftThreshold","fullRightThreshold","startOffsetX","_currentOffset","toValue","isRTL","_animateRow","fromValue","_this$state4","_this$props4","useNativeAnimations","animationOptions","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","onFullSwipeLeft","onWillFullSwipeLeft","onFullSwipeRight","onWillFullSwipeRight","setValue","spring","_objectSpread","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","start","_ref3","finished","released","_this$state5","_this$state5$leftWidt","_this$state5$rowWidth","_this$state$rightOffs4","openLeft","_this$state$leftWidth2","openLeftFull","toggleLeft","shouldAnimate","openRight","_this$state$rowWidth2","_this$state$rightOffs5","openRightFull","_onRowLayout","_ref4","handleMeasure","_onLeftLayout","_ref5","_onRightLayout","_ref6","name","_nativeEvent$layout","layout","width","leftRender","rightRender","setState","measureCompleted","screenWidth","_onGestureEvent","event","listener","_createClass","key","value","render","_this$props5","children","leftActionsContainerStyle","rightActionsContainerStyle","containerStyle","childrenContainerStyle","testID","left","style","styles","leftActions","transform","translateX","onLayout","right","rightActions","activeOffsetX","onGestureEvent","onHandlerStateChange","container","displayName","defaultProps","default","create","overflow","absoluteFillObject","flexDirection"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/drawer/Swipeable.js"],"sourcesContent":["// @ts-nocheck\n// @flow\n// Similarly to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\n// TODO: use Swipeable from react-native-gesture-handler once they support RTL\n\n/* eslint-disable */\nimport React, { Component } from 'react';\nimport { Animated, StyleSheet, View, I18nManager } from 'react-native';\nimport { PanGestureHandler, TapGestureHandler, State } from 'react-native-gesture-handler';\nimport { Constants } from \"../../commons/new\";\nimport { HapticService, HapticType } from \"../../services\";\nconst DRAG_TOSS = 0.05;\nconst LEFT_TOGGLE_THRESHOLD = 0.6;\n\n// Math.sign polyfill for iOS 8.x\nif (!Math.sign) {\n  Math.sign = function (x) {\n    return Number(x > 0) - Number(x < 0) || +x;\n  };\n}\nexport default class Swipeable extends Component {\n  static displayName = 'IGNORE';\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: false,\n    // issue in iPhone5\n    fullLeftThreshold: 0.45,\n    fullRightThreshold: 0.45\n  };\n\n  // _onGestureEvent: ?Animated.Event;\n  // _transX: ?Animated.Interpolation;\n  // _showLeftAction: ?Animated.Interpolation | ?Animated.Value;\n  // _leftActionTranslate: ?Animated.Interpolation;\n  // _showRightAction: ?Animated.Interpolation | ?Animated.Value;\n  // _rightActionTranslate: ?Animated.Interpolation;\n\n  constructor(props) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    // 0 -> open from either left/right,\n    // 1 -> closing to the left\n    // -1 -> closing to the right\n    this.rowState = 0;\n    this.dragThresholdReached = false;\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowWidth: Constants.screenWidth,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      measureCompleted: false\n    };\n    this._onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: dragX\n      }\n    }], {\n      useNativeDriver: props.useNativeAnimations,\n      listener: this._handleDrag\n    });\n  }\n  _triggerHaptic = () => {\n    return !this.props.disableHaptic && HapticService.triggerHaptic(HapticType.impactMedium, 'Drawer');\n  };\n  _handleDrag = e => {\n    const {\n      onToggleSwipeLeft\n    } = this.props;\n    if (onToggleSwipeLeft) {\n      // Drag left toggle\n      const {\n        rowWidth,\n        leftWidth\n      } = this.state;\n      const x = e.nativeEvent.translationX;\n      const threshold = rowWidth * LEFT_TOGGLE_THRESHOLD;\n      if (!this.dragThresholdReached && x >= threshold && x < threshold + 10) {\n        // move item right\n        this.dragThresholdReached = true;\n        this._triggerHaptic();\n        onToggleSwipeLeft({\n          rowWidth,\n          leftWidth,\n          dragX: x\n        });\n      }\n      if (this.dragThresholdReached && x < threshold - 10) {\n        // move item left\n        this.dragThresholdReached = false;\n        onToggleSwipeLeft({\n          rowWidth,\n          leftWidth,\n          dragX: x,\n          resetItemPosition: true\n        });\n      }\n    }\n  };\n  getTransX = () => {\n    const {\n      friction,\n      overshootFriction\n    } = this.props;\n    const {\n      dragX,\n      rowTranslation,\n      leftWidth = 0,\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0\n    } = this.props;\n    const transX = Animated.add(rowTranslation, dragX.interpolate({\n      inputRange: [0, friction],\n      outputRange: [0, 1]\n    })).interpolate({\n      inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n      outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n    });\n    return transX;\n  };\n  getShowLeftAction = () => {\n    const transX = this.getTransX();\n    const {\n      leftWidth = 0\n    } = this.state;\n    const showLeftAction = leftWidth > 0 ? transX.interpolate({\n      inputRange: [-1, 0, leftWidth],\n      outputRange: [0, 0, 1]\n    }) : new Animated.Value(0);\n    return showLeftAction;\n  };\n  getLeftActionTranslate = () => {\n    const showLeftAction = this.getShowLeftAction();\n    const leftActionTranslate = showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n    return leftActionTranslate;\n  };\n  getShowRightAction = () => {\n    const transX = this.getTransX();\n    const {\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n    const showRightAction = rightWidth > 0 ? transX.interpolate({\n      inputRange: [-rightWidth, 0, 1],\n      outputRange: [1, 0, 0]\n    }) : new Animated.Value(0);\n    return showRightAction;\n  };\n  getRightActionTranslate = () => {\n    const showRightAction = this.getShowRightAction();\n    const rightActionTranslate = showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n    return rightActionTranslate;\n  };\n  _onTapHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    if (this.rowState !== 0) {\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.close();\n      }\n    }\n  };\n  _onHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    }\n    if (nativeEvent.state === State.ACTIVE) {\n      this.props.onDragStart && this.props.onDragStart(this.props);\n    }\n  };\n  _hasLeftActions = this.props.renderLeftActions !== undefined;\n  _hasRightActions = this.props.renderRightActions !== undefined;\n  _handleRelease = nativeEvent => {\n    const {\n      velocityX,\n      translationX: dragX\n    } = nativeEvent;\n    const {\n      leftWidth = 0,\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      fullSwipeLeft,\n      fullSwipeRight,\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n      fullLeftThreshold,\n      fullRightThreshold,\n      onToggleSwipeLeft\n    } = this.props;\n    const startOffsetX = this._currentOffset() + dragX / friction;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n    let toValue = 0;\n    if (this.rowState === 0) {\n      if (Constants.isRTL && this._hasLeftActions && onToggleSwipeLeft && translationX < -(rowWidth * LEFT_TOGGLE_THRESHOLD) && !this.dragThresholdReached) {\n        // Swipe left toggle RTL\n        toValue = -(rowWidth * LEFT_TOGGLE_THRESHOLD);\n      } else if (this._hasLeftActions && onToggleSwipeLeft && translationX > rowWidth * LEFT_TOGGLE_THRESHOLD && !this.dragThresholdReached) {\n        // Swipe left toggle\n        toValue = rowWidth * LEFT_TOGGLE_THRESHOLD;\n      } else if (!onToggleSwipeLeft && fullSwipeLeft && translationX > rowWidth * fullLeftThreshold) {\n        // Full left swipe\n        this._triggerHaptic();\n        toValue = rowWidth;\n      } else if (this._hasRightActions && fullSwipeRight && translationX < -rowWidth * fullRightThreshold) {\n        // Full right swipe\n        this._triggerHaptic();\n        toValue = -rowWidth;\n      } else if (this._hasLeftActions && translationX > leftThreshold) {\n        // left swipe\n        if (!onToggleSwipeLeft || onToggleSwipeLeft && translationX < rowWidth * LEFT_TOGGLE_THRESHOLD) {\n          // left swipe with toggle\n          toValue = leftWidth;\n        }\n      } else if (this._hasRightActions && translationX < -rightThreshold) {\n        // right swipe\n        toValue = -rightWidth;\n      }\n    } else if (this.rowState === 1) {\n      // swiped to the right (left swipe)\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to the left (right swipe)\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n    this._animateRow(startOffsetX, toValue, velocityX / friction);\n  };\n  _animateRow = (fromValue, toValue, velocityX) => {\n    const {\n      dragX,\n      rowTranslation,\n      rowWidth,\n      leftWidth\n    } = this.state;\n    const {\n      useNativeAnimations,\n      animationOptions,\n      onSwipeableLeftOpen,\n      onSwipeableRightOpen,\n      onSwipeableClose,\n      onSwipeableOpen,\n      onSwipeableLeftWillOpen,\n      onSwipeableRightWillOpen,\n      onSwipeableWillClose,\n      onSwipeableWillOpen,\n      onFullSwipeLeft,\n      onToggleSwipeLeft,\n      onWillFullSwipeLeft,\n      onFullSwipeRight,\n      onWillFullSwipeRight\n    } = this.props;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n    this.rowState = Math.sign(toValue);\n    Animated.spring(rowTranslation, {\n      toValue,\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      useNativeDriver: useNativeAnimations,\n      ...animationOptions\n    }).start(({\n      finished\n    }) => {\n      if (finished) {\n        // Final Callbacks\n        if (toValue === rowWidth && onFullSwipeLeft) {\n          onFullSwipeLeft();\n        } else if (toValue === -rowWidth && onFullSwipeRight) {\n          onFullSwipeRight();\n        } else if (toValue > 0 && onSwipeableLeftOpen) {\n          onSwipeableLeftOpen();\n        } else if (toValue < 0 && onSwipeableRightOpen) {\n          onSwipeableRightOpen();\n        }\n        if (toValue === 0) {\n          onSwipeableClose && onSwipeableClose();\n        } else {\n          onSwipeableOpen && onSwipeableOpen();\n        }\n      }\n    });\n\n    // Transition Callbacks\n    if (Constants.isRTL && this._hasLeftActions && onToggleSwipeLeft && (toValue === -(rowWidth * LEFT_TOGGLE_THRESHOLD) || this.dragThresholdReached)) {\n      // left toggle RTL\n      onToggleSwipeLeft({\n        rowWidth,\n        leftWidth,\n        released: true,\n        triggerHaptic: !this.dragThresholdReached\n      });\n    } else if (this._hasLeftActions && onToggleSwipeLeft && (toValue === rowWidth * LEFT_TOGGLE_THRESHOLD || this.dragThresholdReached)) {\n      // left toggle\n      onToggleSwipeLeft({\n        rowWidth,\n        leftWidth,\n        released: true,\n        triggerHaptic: !this.dragThresholdReached\n      });\n      this.dragThresholdReached = false;\n    } else if (toValue === rowWidth && onWillFullSwipeLeft) {\n      onWillFullSwipeLeft();\n    } else if (toValue === -rowWidth && onWillFullSwipeRight) {\n      onWillFullSwipeRight();\n    } else if (toValue > 0 && onSwipeableLeftWillOpen) {\n      onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && onSwipeableRightWillOpen) {\n      onSwipeableRightWillOpen();\n    }\n    if (toValue === 0) {\n      onSwipeableWillClose && onSwipeableWillClose();\n    } else {\n      onSwipeableWillOpen && onSwipeableWillOpen();\n    }\n  };\n  _currentOffset = () => {\n    const {\n      leftWidth = 0,\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (this.rowState === 1) {\n      return leftWidth;\n    } else if (this.rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n  close = () => {\n    this._animateRow(this._currentOffset(), 0);\n  };\n  openLeft = () => {\n    const {\n      leftWidth = 0\n    } = this.state;\n    this._animateRow(this._currentOffset(), leftWidth);\n  };\n  openLeftFull = () => {\n    if (this._hasLeftActions) {\n      const {\n        rowWidth\n      } = this.state;\n      this._animateRow(this._currentOffset(), rowWidth);\n    }\n  };\n  toggleLeft = () => {\n    // Programmatically left toggle\n    const shouldAnimate = Constants.isRTL ? this._hasRightActions : this._hasLeftActions;\n    if (shouldAnimate) {\n      const {\n        rowWidth\n      } = this.state;\n      this._animateRow(this._currentOffset(), rowWidth * LEFT_TOGGLE_THRESHOLD * (Constants.isRTL ? -1 : 1));\n    }\n  };\n  openRight = () => {\n    const {\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this._animateRow(this._currentOffset(), -rightWidth);\n  };\n  openRightFull = () => {\n    if (this._hasRightActions) {\n      const {\n        rowWidth\n      } = this.state;\n      this._animateRow(this._currentOffset(), -rowWidth);\n    }\n  };\n  _onRowLayout = ({\n    nativeEvent\n  }) => this.handleMeasure('rowWidth', nativeEvent);\n  _onLeftLayout = ({\n    nativeEvent\n  }) => this.handleMeasure('leftWidth', nativeEvent);\n  _onRightLayout = ({\n    nativeEvent\n  }) => this.handleMeasure('rightOffset', nativeEvent);\n  handleMeasure = (name, nativeEvent) => {\n    const {\n      width,\n      x\n    } = nativeEvent.layout;\n    switch (name) {\n      case 'rowWidth':\n        this.rowWidth = width;\n        break;\n      case 'leftWidth':\n        this.leftWidth = x;\n        break;\n      case 'rightOffset':\n        this.rightOffset = x;\n        break;\n      default:\n        break;\n    }\n    const leftRender = this._hasLeftActions ? this.leftWidth : true;\n    const rightRender = this._hasRightActions ? this.rightOffset : true;\n    if (this.rowWidth && leftRender && rightRender) {\n      this.setState({\n        rowWidth: this.rowWidth,\n        leftWidth: this.leftWidth,\n        rightOffset: this.rightOffset,\n        measureCompleted: true\n      });\n    }\n  };\n  render() {\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      leftActionsContainerStyle,\n      rightActionsContainerStyle,\n      containerStyle,\n      childrenContainerStyle,\n      testID\n    } = this.props;\n    const left = this._hasLeftActions && <Animated.View style={[styles.leftActions, leftActionsContainerStyle, {\n      transform: [{\n        translateX: this.getLeftActionTranslate()\n      }]\n    }]}>\n        {renderLeftActions(this.getShowLeftAction(), this.getTransX())}\n        <View onLayout={this._onLeftLayout} />\n      </Animated.View>;\n    const right = this._hasRightActions && <Animated.View style={[styles.rightActions, rightActionsContainerStyle, {\n      transform: [{\n        translateX: this.getRightActionTranslate()\n      }]\n    }]}>\n        {renderRightActions(this.getShowRightAction(), this.getTransX())}\n        <View onLayout={this._onRightLayout} />\n      </Animated.View>;\n    return <PanGestureHandler {...this.props}\n    // minDeltaX={10}\n    activeOffsetX={[-44, 44]} onGestureEvent={this._onGestureEvent} onHandlerStateChange={this._onHandlerStateChange}>\n        <Animated.View onLayout={this._onRowLayout} style={[styles.container, containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n            <Animated.View style={[{\n            transform: [{\n              translateX: this.getTransX()\n            }]\n          }, childrenContainerStyle]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>;\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}