{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"flex\", \"left\", \"top\", \"right\", \"bottom\", \"style\", \"hint\", \"color\", \"forwardedRef\", \"formatter\", \"useGestureHandlerInput\", \"readonly\", \"recorderTag\", \"pointerEvents\", \"showMandatoryIndication\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useContext, useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TextInput as RNTextInput } from \"./textInput\";\nimport { Constants } from \"../../commons/new\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Input = function Input(_ref) {\n  var flex = _ref.flex,\n    left = _ref.left,\n    top = _ref.top,\n    right = _ref.right,\n    bottom = _ref.bottom,\n    style = _ref.style,\n    hint = _ref.hint,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? {\n      default: Colors.$textDefault,\n      disabled: Colors.$textDisabled,\n      readonly: Colors.$textNeutral\n    } : _ref$color,\n    forwardedRef = _ref.forwardedRef,\n    formatter = _ref.formatter,\n    useGestureHandlerInput = _ref.useGestureHandlerInput,\n    readonly = _ref.readonly,\n    recorderTag = _ref.recorderTag,\n    pointerEvents = _ref.pointerEvents,\n    showMandatoryIndication = _ref.showMandatoryIndication,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var inputRef = useImperativeInputHandle(forwardedRef, {\n    onChangeText: props.onChangeText\n  });\n  var context = useContext(FieldContext);\n  var placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  var inputColor = getColorByState(color, context);\n  var placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  var value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  var disabled = props.editable === false || readonly;\n  var shouldRenderIndication = context.isMandatory && showMandatoryIndication;\n  var TextInput = useMemo(function () {\n    if (useGestureHandlerInput) {\n      var _require = require('react-native-gesture-handler'),\n        GestureTextInput = _require.TextInput;\n      return GestureTextInput;\n    } else {\n      return RNTextInput;\n    }\n  }, [useGestureHandlerInput]);\n  return _jsx(TextInput, _objectSpread(_objectSpread({\n    fsTagName: recorderTag,\n    style: [styles.input, !!inputColor && {\n      color: inputColor\n    }, style, Constants.isWeb && styles.webStyle]\n  }, props), {}, {\n    editable: !disabled,\n    value: value,\n    placeholder: shouldRenderIndication ? placeholder == null ? void 0 : placeholder.concat('*') : placeholder,\n    placeholderTextColor: placeholderTextColor,\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    pointerEvents: disabled ? 'none' : pointerEvents\n  }));\n};\nvar styles = StyleSheet.create({\n  input: _objectSpread({\n    flexGrow: 1,\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    paddingTop: 0,\n    paddingBottom: 0\n  }, Platform.select({\n    android: {\n      padding: 0,\n      textAlignVertical: 'center'\n    }\n  })),\n  webStyle: {\n    outlineWidth: 0\n  }\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;","map":{"version":3,"names":["React","useContext","useMemo","StyleSheet","Platform","TextInput","RNTextInput","Constants","getColorByState","Colors","FieldContext","useImperativeInputHandle","jsx","_jsx","Input","_ref","flex","left","top","right","bottom","style","hint","_ref$color","color","default","$textDefault","disabled","$textDisabled","readonly","$textNeutral","forwardedRef","formatter","useGestureHandlerInput","recorderTag","pointerEvents","showMandatoryIndication","props","_objectWithoutProperties","_excluded","inputRef","onChangeText","context","placeholder","isFocused","inputColor","placeholderTextColor","value","editable","shouldRenderIndication","isMandatory","_require","require","GestureTextInput","_objectSpread","fsTagName","styles","input","isWeb","webStyle","concat","ref","underlineColorAndroid","accessibilityState","create","flexGrow","textAlign","isRTL","paddingTop","paddingBottom","select","android","padding","textAlignVertical","outlineWidth","displayName"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/textField/Input.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport { TextInput as RNTextInput } from \"./textInput\";\nimport { Constants } from \"../../commons/new\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nconst Input = ({\n  // (!) extract flex prop to avoid passing them on Android\n  // TODO: extract alignment (top, right, ...) props till we manage to exclude them from typings\n  /* eslint-disable */\n  // @ts-ignore (does not exist on props)\n  flex,\n  // @ts-ignore\n  left,\n  // @ts-ignore\n  top,\n  // @ts-ignore\n  right,\n  // @ts-ignore\n  bottom,\n  /* eslint-enable */\n  style,\n  hint,\n  color = {\n    default: Colors.$textDefault,\n    disabled: Colors.$textDisabled,\n    readonly: Colors.$textNeutral\n  },\n  forwardedRef,\n  formatter,\n  useGestureHandlerInput,\n  readonly,\n  recorderTag,\n  pointerEvents,\n  showMandatoryIndication,\n  ...props\n}) => {\n  const inputRef = useImperativeInputHandle(forwardedRef, {\n    onChangeText: props.onChangeText\n  });\n  const context = useContext(FieldContext);\n  const placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  const inputColor = getColorByState(color, context);\n  const placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  const value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  const disabled = props.editable === false || readonly;\n  const shouldRenderIndication = context.isMandatory && showMandatoryIndication;\n  const TextInput = useMemo(() => {\n    if (useGestureHandlerInput) {\n      const {\n        TextInput: GestureTextInput\n      } = require('react-native-gesture-handler');\n      return GestureTextInput;\n    } else {\n      return RNTextInput;\n    }\n  }, [useGestureHandlerInput]);\n  return <TextInput fsTagName={recorderTag} style={[styles.input, !!inputColor && {\n    color: inputColor\n  }, style, Constants.isWeb && styles.webStyle]} {...props} editable={!disabled} value={value} placeholder={shouldRenderIndication ? placeholder?.concat('*') : placeholder} placeholderTextColor={placeholderTextColor}\n  // @ts-expect-error\n  ref={inputRef} underlineColorAndroid=\"transparent\" accessibilityState={{\n    disabled\n  }} pointerEvents={disabled ? 'none' : pointerEvents} />;\n};\nconst styles = StyleSheet.create({\n  input: {\n    flexGrow: 1,\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    // Setting paddingTop/Bottom separately fix height issues on iOS with multiline\n    paddingTop: 0,\n    paddingBottom: 0,\n    ...Platform.select({\n      // This reset android input inner spacing\n      android: {\n        padding: 0,\n        textAlignVertical: 'center'\n      }\n    })\n  },\n  webStyle: {\n    // @ts-expect-error\n    outlineWidth: 0\n  }\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAEnD,SAASC,SAAS,IAAIC,WAAW;AACjC,SAASC,SAAS;AAClB,SAASC,eAAe;AACxB,SAASC,MAAM;AACf,OAAOC,YAAY;AACnB,OAAOC,wBAAwB;AAAmC,SAAAC,GAAA,IAAAC,IAAA;AAClE,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAAC,IAAA,EA8BL;EAAA,IAzBJC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IAEJC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAEJC,GAAG,GAAAH,IAAA,CAAHG,GAAG;IAEHC,KAAK,GAAAJ,IAAA,CAALI,KAAK;IAELC,MAAM,GAAAL,IAAA,CAANK,MAAM;IAENC,KAAK,GAAAN,IAAA,CAALM,KAAK;IACLC,IAAI,GAAAP,IAAA,CAAJO,IAAI;IAAAC,UAAA,GAAAR,IAAA,CACJS,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG;MACNE,OAAO,EAAEhB,MAAM,CAACiB,YAAY;MAC5BC,QAAQ,EAAElB,MAAM,CAACmB,aAAa;MAC9BC,QAAQ,EAAEpB,MAAM,CAACqB;IACnB,CAAC,GAAAP,UAAA;IACDQ,YAAY,GAAAhB,IAAA,CAAZgB,YAAY;IACZC,SAAS,GAAAjB,IAAA,CAATiB,SAAS;IACTC,sBAAsB,GAAAlB,IAAA,CAAtBkB,sBAAsB;IACtBJ,QAAQ,GAAAd,IAAA,CAARc,QAAQ;IACRK,WAAW,GAAAnB,IAAA,CAAXmB,WAAW;IACXC,aAAa,GAAApB,IAAA,CAAboB,aAAa;IACbC,uBAAuB,GAAArB,IAAA,CAAvBqB,uBAAuB;IACpBC,KAAK,GAAAC,wBAAA,CAAAvB,IAAA,EAAAwB,SAAA;EAER,IAAMC,QAAQ,GAAG7B,wBAAwB,CAACoB,YAAY,EAAE;IACtDU,YAAY,EAAEJ,KAAK,CAACI;EACtB,CAAC,CAAC;EACF,IAAMC,OAAO,GAAGzC,UAAU,CAACS,YAAY,CAAC;EACxC,IAAMiC,WAAW,GAAG,CAACD,OAAO,CAACE,SAAS,GAAGP,KAAK,CAACM,WAAW,GAAGrB,IAAI,IAAIe,KAAK,CAACM,WAAW;EACtF,IAAME,UAAU,GAAGrC,eAAe,CAACgB,KAAK,EAAEkB,OAAO,CAAC;EAClD,IAAMI,oBAAoB,GAAGtC,eAAe,CAAC6B,KAAK,CAACS,oBAAoB,EAAEJ,OAAO,CAAC;EACjF,IAAMK,KAAK,GAAGf,SAAS,IAAI,CAACU,OAAO,CAACE,SAAS,GAAGZ,SAAS,CAACK,KAAK,CAACU,KAAK,CAAC,GAAGV,KAAK,CAACU,KAAK;EACpF,IAAMpB,QAAQ,GAAGU,KAAK,CAACW,QAAQ,KAAK,KAAK,IAAInB,QAAQ;EACrD,IAAMoB,sBAAsB,GAAGP,OAAO,CAACQ,WAAW,IAAId,uBAAuB;EAC7E,IAAM/B,SAAS,GAAGH,OAAO,CAAC,YAAM;IAC9B,IAAI+B,sBAAsB,EAAE;MAC1B,IAAAkB,QAAA,GAEIC,OAAO,CAAC,8BAA8B,CAAC;QAD9BC,gBAAgB,GAAAF,QAAA,CAA3B9C,SAAS;MAEX,OAAOgD,gBAAgB;IACzB,CAAC,MAAM;MACL,OAAO/C,WAAW;IACpB;EACF,CAAC,EAAE,CAAC2B,sBAAsB,CAAC,CAAC;EAC5B,OAAOpB,IAAA,CAACR,SAAS,EAAAiD,aAAA,CAAAA,aAAA;IAACC,SAAS,EAAErB,WAAY;IAACb,KAAK,EAAE,CAACmC,MAAM,CAACC,KAAK,EAAE,CAAC,CAACZ,UAAU,IAAI;MAC9ErB,KAAK,EAAEqB;IACT,CAAC,EAAExB,KAAK,EAAEd,SAAS,CAACmD,KAAK,IAAIF,MAAM,CAACG,QAAQ;EAAE,GAAKtB,KAAK;IAAEW,QAAQ,EAAE,CAACrB,QAAS;IAACoB,KAAK,EAAEA,KAAM;IAACJ,WAAW,EAAEM,sBAAsB,GAAGN,WAAW,oBAAXA,WAAW,CAAEiB,MAAM,CAAC,GAAG,CAAC,GAAGjB,WAAY;IAACG,oBAAoB,EAAEA,oBAAqB;IAEtNe,GAAG,EAAErB,QAAS;IAACsB,qBAAqB,EAAC,aAAa;IAACC,kBAAkB,EAAE;MACrEpC,QAAQ,EAARA;IACF,CAAE;IAACQ,aAAa,EAAER,QAAQ,GAAG,MAAM,GAAGQ;EAAc,EAAE,CAAC;AACzD,CAAC;AACD,IAAMqB,MAAM,GAAGrD,UAAU,CAAC6D,MAAM,CAAC;EAC/BP,KAAK,EAAAH,aAAA;IACHW,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE3D,SAAS,CAAC4D,KAAK,GAAG,OAAO,GAAG,MAAM;IAE7CC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE;EAAC,GACbjE,QAAQ,CAACkE,MAAM,CAAC;IAEjBC,OAAO,EAAE;MACPC,OAAO,EAAE,CAAC;MACVC,iBAAiB,EAAE;IACrB;EACF,CAAC,CAAC,CACH;EACDd,QAAQ,EAAE;IAERe,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AACF5D,KAAK,CAAC6D,WAAW,GAAG,qBAAqB;AACzC,eAAe7D,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}