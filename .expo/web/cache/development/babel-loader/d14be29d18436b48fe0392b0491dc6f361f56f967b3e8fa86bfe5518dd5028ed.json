{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction formatNumber(value, options) {\n  return value.toLocaleString(options.localeOptions.locale, {\n    maximumFractionDigits: options.fractionDigits,\n    minimumFractionDigits: options.fractionDigits\n  });\n}\nfunction generateLocaleOptions(locale) {\n  var options = {\n    localeOptions: {\n      locale: locale,\n      decimalSeparator: '',\n      thousandSeparator: ''\n    }\n  };\n  var decimalOptions = _objectSpread(_objectSpread({}, options), {}, {\n    fractionDigits: 1\n  });\n  var thousandOptions = _objectSpread(_objectSpread({}, options), {}, {\n    fractionDigits: 0\n  });\n  var decimalSeparator = formatNumber(1.1, decimalOptions).replace(/1/g, '');\n  var thousandSeparator = formatNumber(1111, thousandOptions).replace(/1/g, '');\n  return {\n    locale: locale,\n    decimalSeparator: decimalSeparator,\n    thousandSeparator: thousandSeparator\n  };\n}\nexport function generateOptions(locale, fractionDigits) {\n  return {\n    localeOptions: generateLocaleOptions(locale),\n    fractionDigits: fractionDigits\n  };\n}\nfunction factor(options) {\n  return Math.pow(10, options.fractionDigits);\n}\nexport function getInitialNumber() {\n  var propsInitialNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  return Number((propsInitialNumber * factor(options)).toFixed(0));\n}\nexport function parseInput(text, options, initialNumber) {\n  var cleanInput = text.replaceAll(options.localeOptions.thousandSeparator, '');\n  cleanInput = cleanInput.replaceAll(options.localeOptions.decimalSeparator, initialNumber ? '.' : '');\n  var number = Number(cleanInput);\n  if (isNaN(number)) {\n    return {\n      type: 'error',\n      userInput: text\n    };\n  }\n  number = Number(number.toFixed(options.fractionDigits));\n  if (options.fractionDigits > 0) {\n    number /= factor(options);\n  }\n  var formattedNumber = formatNumber(number, options);\n  return {\n    type: 'valid',\n    userInput: initialNumber ? `${initialNumber}` : cleanInput,\n    number: number,\n    formattedNumber: formattedNumber\n  };\n}","map":{"version":3,"names":["formatNumber","value","options","toLocaleString","localeOptions","locale","maximumFractionDigits","fractionDigits","minimumFractionDigits","generateLocaleOptions","decimalSeparator","thousandSeparator","decimalOptions","_objectSpread","thousandOptions","replace","generateOptions","factor","Math","pow","getInitialNumber","propsInitialNumber","arguments","length","undefined","Number","toFixed","parseInput","text","initialNumber","cleanInput","replaceAll","number","isNaN","type","userInput","formattedNumber"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/numberInput/Presenter.js"],"sourcesContent":["function formatNumber(value, options) {\n  return value.toLocaleString(options.localeOptions.locale, {\n    maximumFractionDigits: options.fractionDigits,\n    minimumFractionDigits: options.fractionDigits\n  });\n}\nfunction generateLocaleOptions(locale) {\n  const options = {\n    localeOptions: {\n      locale,\n      decimalSeparator: '',\n      // fake decimalSeparator, we're creating it now\n      thousandSeparator: '' // fake thousandSeparator, we're creating it now\n    }\n  };\n  const decimalOptions = {\n    ...options,\n    fractionDigits: 1\n  };\n  const thousandOptions = {\n    ...options,\n    fractionDigits: 0\n  };\n  const decimalSeparator = formatNumber(1.1, decimalOptions).replace(/1/g, '');\n  const thousandSeparator = formatNumber(1111, thousandOptions).replace(/1/g, '');\n  return {\n    locale,\n    decimalSeparator,\n    thousandSeparator\n  };\n}\nexport function generateOptions(locale, fractionDigits) {\n  return {\n    localeOptions: generateLocaleOptions(locale),\n    fractionDigits\n  };\n}\nfunction factor(options) {\n  return Math.pow(10, options.fractionDigits);\n}\nexport function getInitialNumber(propsInitialNumber = 0, options) {\n  return Number((propsInitialNumber * factor(options)).toFixed(0));\n}\nexport function parseInput(text, options, initialNumber) {\n  let cleanInput = text.replaceAll(options.localeOptions.thousandSeparator, '');\n  cleanInput = cleanInput.replaceAll(options.localeOptions.decimalSeparator, initialNumber ? '.' : '');\n  let number = Number(cleanInput);\n  if (isNaN(number)) {\n    return {\n      type: 'error',\n      userInput: text\n    };\n  }\n  number = Number(number.toFixed(options.fractionDigits));\n  if (options.fractionDigits > 0) {\n    number /= factor(options);\n  }\n  const formattedNumber = formatNumber(number, options);\n  return {\n    type: 'valid',\n    userInput: initialNumber ? `${initialNumber}` : cleanInput,\n    number,\n    formattedNumber\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}