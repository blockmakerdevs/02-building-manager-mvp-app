{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport FontLoader, { FontExtension } from \"./FontLoader\";\nimport FontDownloader from \"./FontDownloader\";\nimport PermissionsAcquirer from \"./PermissionsAcquirer\";\nimport NoPermissionsAcquirer from \"./NoPermissionsAcquirer\";\nvar DEFAULT_FONT_LOAD_ERROR_MESSAGE = 'Unable to load this font.';\nexport { FontExtension };\nvar DynamicFonts = function () {\n  function DynamicFonts(props) {\n    var _this$props$permissio, _this$props$fontDownl;\n    _classCallCheck(this, DynamicFonts);\n    var _props$debug = props.debug,\n      debug = _props$debug === void 0 ? __DEV__ : _props$debug,\n      doNotRequestPermissions = props.doNotRequestPermissions;\n    this.props = _objectSpread({\n      fontLoadErrorMessage: DEFAULT_FONT_LOAD_ERROR_MESSAGE\n    }, props);\n    this.permissionsAcquirer = doNotRequestPermissions ? new NoPermissionsAcquirer() : new PermissionsAcquirer((_this$props$permissio = this.props.permissionsAcquirerProps) != null ? _this$props$permissio : {});\n    this.fontLoader = new FontLoader({\n      debug: debug\n    });\n    var fontDownloadingProps = (_this$props$fontDownl = this.props.fontDownloadingProps) != null ? _this$props$fontDownl : {};\n    this.fontDownloader = new FontDownloader(_objectSpread(_objectSpread({}, fontDownloadingProps), {}, {\n      debug: debug\n    }));\n  }\n  _createClass(DynamicFonts, [{\n    key: \"log\",\n    value: function log(message) {\n      var debug = this.props.debug;\n      if (debug) {\n        for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          optionalParams[_key - 1] = arguments[_key];\n        }\n        console.log(message, optionalParams);\n      }\n    }\n  }, {\n    key: \"loadFont\",\n    value: function () {\n      var _loadFont = _asyncToGenerator(function* (input) {\n        var fontLoadErrorMessage = this.props.fontLoadErrorMessage;\n        try {\n          return yield this.fontLoader.loadFont(input);\n        } catch (err) {\n          return Promise.reject({\n            source: 'uilib:FontDownloader:loadFont',\n            message: `${fontLoadErrorMessage} fontName: ${input.fontName} error: ${JSON.stringify(err)}`\n          });\n        }\n      });\n      function loadFont(_x) {\n        return _loadFont.apply(this, arguments);\n      }\n      return loadFont;\n    }()\n  }, {\n    key: \"getFont\",\n    value: (function () {\n      var _getFont = _asyncToGenerator(function* (_ref) {\n        var fontUri = _ref.fontUri,\n          fontName = _ref.fontName,\n          fontExtension = _ref.fontExtension,\n          _ref$timeout = _ref.timeout,\n          timeout = _ref$timeout === void 0 ? 5000 : _ref$timeout;\n        var fontLoadErrorMessage = this.props.fontLoadErrorMessage;\n        yield this.permissionsAcquirer.getPermissions();\n        if (yield this.fontDownloader.isFontDownloaded(fontName, fontExtension)) {\n          this.log(fontName, 'Already downloaded');\n        } else {\n          yield this.fontDownloader.downloadFont(fontUri, fontName, fontExtension, timeout);\n        }\n        var base64FontString = yield this.fontDownloader.readFontFromDisk(fontName, fontExtension);\n        if (base64FontString) {\n          this.log(fontName, 'Loading');\n          var _fontName = yield this.loadFont({\n            fontName: fontName,\n            base64FontString: base64FontString,\n            fontExtension: fontExtension\n          });\n          this.log(_fontName, 'Finished loading');\n          return Promise.resolve(_fontName);\n        } else {\n          return Promise.reject({\n            source: 'uilib:FontDownloader:getFont',\n            message: `${fontLoadErrorMessage} fontName: ${fontName}`\n          });\n        }\n      });\n      function getFont(_x2) {\n        return _getFont.apply(this, arguments);\n      }\n      return getFont;\n    }())\n  }, {\n    key: \"getFonts\",\n    value: function () {\n      var _getFonts = _asyncToGenerator(function* (fonts) {\n        var _this = this;\n        yield this.permissionsAcquirer.getPermissions();\n        if (fonts instanceof Array) {\n          return Promise.all(fonts.filter(function (font) {\n            return font;\n          }).map(function (font) {\n            return _this.getFont(font);\n          }));\n        } else {\n          return Promise.resolve([yield this.getFont(fonts)]);\n        }\n      });\n      function getFonts(_x3) {\n        return _getFonts.apply(this, arguments);\n      }\n      return getFonts;\n    }()\n  }, {\n    key: \"buildFontData\",\n    value: function buildFontData(rootUri, fontName, fontExtension, fontNamePrefix) {\n      var _fontName = `${fontNamePrefix != null ? fontNamePrefix : ''}${fontName}`;\n      var fullFontName = `${_fontName}.${fontExtension}`;\n      return {\n        fontUri: `${rootUri}${fullFontName}`,\n        fontName: _fontName,\n        fontExtension: fontExtension,\n        fullFontName: fullFontName\n      };\n    }\n  }, {\n    key: \"getFontFamily\",\n    value: function () {\n      var _getFontFamily = _asyncToGenerator(function* (rootUri, fontNames, fontExtension, fontNamePrefix) {\n        var _this2 = this;\n        var retries = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n        var fonts = fontNames.map(function (fontName) {\n          return _this2.buildFontData(rootUri, fontName, fontExtension, fontNamePrefix);\n        });\n        var fontsLoaded = [];\n        var tryCounter = 0;\n        while (fontsLoaded.length < fontNames.length && tryCounter < retries) {\n          try {\n            ++tryCounter;\n            fontsLoaded = yield this.getFonts(fonts);\n          } catch (error) {\n            this.log(`getFontFamily failed (try #${tryCounter}) error:`, error);\n          }\n        }\n        return Promise.resolve(fontsLoaded);\n      });\n      function getFontFamily(_x4, _x5, _x6, _x7) {\n        return _getFontFamily.apply(this, arguments);\n      }\n      return getFontFamily;\n    }()\n  }, {\n    key: \"deleteFontFromDisk\",\n    value: function () {\n      var _deleteFontFromDisk = _asyncToGenerator(function* (fontName, fontExtension, fontNamePrefix) {\n        var fontInput = this.buildFontData('', fontName, fontExtension, fontNamePrefix);\n        yield this.fontDownloader.deleteFontFromDisk(fontInput.fullFontName);\n      });\n      function deleteFontFromDisk(_x8, _x9, _x10) {\n        return _deleteFontFromDisk.apply(this, arguments);\n      }\n      return deleteFontFromDisk;\n    }()\n  }, {\n    key: \"deleteFont\",\n    value: function () {\n      var _deleteFont = _asyncToGenerator(function* (fontName, fontExtension) {\n        yield this.permissionsAcquirer.getPermissions();\n        yield this.deleteFontFromDisk(fontName, fontExtension);\n      });\n      function deleteFont(_x11, _x12) {\n        return _deleteFont.apply(this, arguments);\n      }\n      return deleteFont;\n    }()\n  }, {\n    key: \"deleteFontFamily\",\n    value: function () {\n      var _deleteFontFamily = _asyncToGenerator(function* (fontNames, fontExtension, fontNamePrefix) {\n        var _this3 = this;\n        yield this.permissionsAcquirer.getPermissions();\n        fontNames.forEach(function () {\n          var _ref2 = _asyncToGenerator(function* (fontName) {\n            yield _this3.deleteFontFromDisk(fontName, fontExtension, fontNamePrefix);\n          });\n          return function (_x16) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      });\n      function deleteFontFamily(_x13, _x14, _x15) {\n        return _deleteFontFamily.apply(this, arguments);\n      }\n      return deleteFontFamily;\n    }()\n  }, {\n    key: \"isFontDownloaded\",\n    value: function () {\n      var _isFontDownloaded = _asyncToGenerator(function* (fontName, fontExtension) {\n        return yield this.fontDownloader.isFontDownloaded(fontName, fontExtension);\n      });\n      function isFontDownloaded(_x17, _x18) {\n        return _isFontDownloaded.apply(this, arguments);\n      }\n      return isFontDownloaded;\n    }()\n  }, {\n    key: \"isFontFamilyDownloaded\",\n    value: function () {\n      var _isFontFamilyDownloaded = _asyncToGenerator(function* (rootUri, fontNames, fontExtension, fontNamePrefix) {\n        var _this4 = this;\n        var fonts = fontNames.map(function (fontName) {\n          return _this4.buildFontData(rootUri, fontName, fontExtension, fontNamePrefix);\n        });\n        try {\n          var areDownloaded = yield Promise.all(fonts.filter(function (font) {\n            return font;\n          }).map(function (font) {\n            return _this4.fontDownloader.isFontDownloaded(font.fontName, font.fontExtension);\n          }));\n          return Promise.resolve(areDownloaded.every(function (v) {\n            return v === true;\n          }));\n        } catch (error) {\n          this.log(`isFontFamilyDownloaded failed error:`, error);\n          return Promise.resolve(false);\n        }\n      });\n      function isFontFamilyDownloaded(_x19, _x20, _x21, _x22) {\n        return _isFontFamilyDownloaded.apply(this, arguments);\n      }\n      return isFontFamilyDownloaded;\n    }()\n  }]);\n  return DynamicFonts;\n}();\nexport { DynamicFonts as default };","map":{"version":3,"names":["FontLoader","FontExtension","FontDownloader","PermissionsAcquirer","NoPermissionsAcquirer","DEFAULT_FONT_LOAD_ERROR_MESSAGE","DynamicFonts","props","_this$props$permissio","_this$props$fontDownl","_classCallCheck","_props$debug","debug","__DEV__","doNotRequestPermissions","_objectSpread","fontLoadErrorMessage","permissionsAcquirer","permissionsAcquirerProps","fontLoader","fontDownloadingProps","fontDownloader","_createClass","key","value","log","message","_len","arguments","length","optionalParams","Array","_key","console","_loadFont","_asyncToGenerator","input","loadFont","err","Promise","reject","source","fontName","JSON","stringify","_x","apply","_getFont","_ref","fontUri","fontExtension","_ref$timeout","timeout","getPermissions","isFontDownloaded","downloadFont","base64FontString","readFontFromDisk","_fontName","resolve","getFont","_x2","_getFonts","fonts","_this","all","filter","font","map","getFonts","_x3","buildFontData","rootUri","fontNamePrefix","fullFontName","_getFontFamily","fontNames","_this2","retries","undefined","fontsLoaded","tryCounter","error","getFontFamily","_x4","_x5","_x6","_x7","_deleteFontFromDisk","fontInput","deleteFontFromDisk","_x8","_x9","_x10","_deleteFont","deleteFont","_x11","_x12","_deleteFontFamily","_this3","forEach","_ref2","_x16","deleteFontFamily","_x13","_x14","_x15","_isFontDownloaded","_x17","_x18","_isFontFamilyDownloaded","_this4","areDownloaded","every","v","isFontFamilyDownloaded","_x19","_x20","_x21","_x22","default"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/lib/components/DynamicFonts/index.js"],"sourcesContent":["import FontLoader, { FontExtension } from \"./FontLoader\";\nimport FontDownloader from \"./FontDownloader\";\n// @ts-expect-error\nimport PermissionsAcquirer from \"./PermissionsAcquirer\";\nimport NoPermissionsAcquirer from \"./NoPermissionsAcquirer\";\nconst DEFAULT_FONT_LOAD_ERROR_MESSAGE = 'Unable to load this font.';\nexport { FontExtension };\nexport default class DynamicFonts {\n  constructor(props) {\n    const {\n      debug = __DEV__,\n      doNotRequestPermissions\n    } = props;\n    this.props = {\n      fontLoadErrorMessage: DEFAULT_FONT_LOAD_ERROR_MESSAGE,\n      ...props\n    };\n    this.permissionsAcquirer = doNotRequestPermissions ? new NoPermissionsAcquirer() : new PermissionsAcquirer(this.props.permissionsAcquirerProps ?? {});\n    this.fontLoader = new FontLoader({\n      debug\n    });\n    const fontDownloadingProps = this.props.fontDownloadingProps ?? {};\n    this.fontDownloader = new FontDownloader({\n      ...fontDownloadingProps,\n      debug\n    });\n  }\n  log(message, ...optionalParams) {\n    const {\n      debug\n    } = this.props;\n    if (debug) {\n      console.log(message, optionalParams);\n    }\n  }\n  async loadFont(input) {\n    const {\n      fontLoadErrorMessage\n    } = this.props;\n    try {\n      return await this.fontLoader.loadFont(input);\n    } catch (err) {\n      return Promise.reject({\n        source: 'uilib:FontDownloader:loadFont',\n        message: `${fontLoadErrorMessage} fontName: ${input.fontName} error: ${JSON.stringify(err)}`\n      });\n    }\n  }\n\n  /**\n   * Get font - download from uri (or from cache if already downloaded) and load it to memory\n   * You need to handle errors in the form of Promise.reject\n   * @param fontUri the uri of the font (to be downloaded from)\n   * @param fontName the full name of the font\n   * @param fontExtension the extension of the font, i.e. '.ttf' or '.otf'\n   * @param timeout milliseconds for the download to complete in (defaults to 5000)\n   */\n  async getFont({\n    fontUri,\n    fontName,\n    fontExtension,\n    timeout = 5000\n  }) {\n    const {\n      fontLoadErrorMessage\n    } = this.props;\n    await this.permissionsAcquirer.getPermissions();\n    if (await this.fontDownloader.isFontDownloaded(fontName, fontExtension)) {\n      this.log(fontName, 'Already downloaded');\n    } else {\n      await this.fontDownloader.downloadFont(fontUri, fontName, fontExtension, timeout);\n    }\n    const base64FontString = await this.fontDownloader.readFontFromDisk(fontName, fontExtension);\n    if (base64FontString) {\n      this.log(fontName, 'Loading');\n      const _fontName = await this.loadFont({\n        fontName,\n        base64FontString,\n        fontExtension\n      });\n      this.log(_fontName, 'Finished loading');\n      return Promise.resolve(_fontName);\n    } else {\n      return Promise.reject({\n        source: 'uilib:FontDownloader:getFont',\n        message: `${fontLoadErrorMessage} fontName: ${fontName}`\n      });\n    }\n  }\n  async getFonts(fonts) {\n    await this.permissionsAcquirer.getPermissions();\n    if (fonts instanceof Array) {\n      return Promise.all(fonts.filter(font => font).map(font => this.getFont(font)));\n    } else {\n      return Promise.resolve([await this.getFont(fonts)]);\n    }\n  }\n  buildFontData(rootUri, fontName, fontExtension, fontNamePrefix) {\n    const _fontName = `${fontNamePrefix ?? ''}${fontName}`;\n    const fullFontName = `${_fontName}.${fontExtension}`;\n    return {\n      fontUri: `${rootUri}${fullFontName}`,\n      fontName: _fontName,\n      fontExtension,\n      fullFontName\n    };\n  }\n\n  // eslint-disable-next-line max-params\n  async getFontFamily(rootUri, fontNames, fontExtension, fontNamePrefix, retries = 1) {\n    const fonts = fontNames.map(fontName => this.buildFontData(rootUri, fontName, fontExtension, fontNamePrefix));\n    let fontsLoaded = [];\n    let tryCounter = 0;\n    while (fontsLoaded.length < fontNames.length && tryCounter < retries) {\n      try {\n        ++tryCounter;\n        // TODO: we should return successful loaded fonts and not fail all of them\n        fontsLoaded = await this.getFonts(fonts);\n      } catch (error) {\n        this.log(`getFontFamily failed (try #${tryCounter}) error:`, error);\n      }\n    }\n    return Promise.resolve(fontsLoaded);\n  }\n  async deleteFontFromDisk(fontName, fontExtension, fontNamePrefix) {\n    const fontInput = this.buildFontData('', fontName, fontExtension, fontNamePrefix);\n    await this.fontDownloader.deleteFontFromDisk(fontInput.fullFontName);\n  }\n  async deleteFont(fontName, fontExtension) {\n    await this.permissionsAcquirer.getPermissions();\n    await this.deleteFontFromDisk(fontName, fontExtension);\n  }\n  async deleteFontFamily(fontNames, fontExtension, fontNamePrefix) {\n    await this.permissionsAcquirer.getPermissions();\n    fontNames.forEach(async fontName => {\n      await this.deleteFontFromDisk(fontName, fontExtension, fontNamePrefix);\n    });\n  }\n  async isFontDownloaded(fontName, fontExtension) {\n    return await this.fontDownloader.isFontDownloaded(fontName, fontExtension);\n  }\n  async isFontFamilyDownloaded(rootUri, fontNames, fontExtension, fontNamePrefix) {\n    const fonts = fontNames.map(fontName => this.buildFontData(rootUri, fontName, fontExtension, fontNamePrefix));\n    try {\n      const areDownloaded = await Promise.all(fonts.filter(font => font).map(font => {\n        return this.fontDownloader.isFontDownloaded(font.fontName, font.fontExtension);\n      }));\n      return Promise.resolve(areDownloaded.every(v => v === true));\n    } catch (error) {\n      this.log(`isFontFamilyDownloaded failed error:`, error);\n      return Promise.resolve(false);\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}