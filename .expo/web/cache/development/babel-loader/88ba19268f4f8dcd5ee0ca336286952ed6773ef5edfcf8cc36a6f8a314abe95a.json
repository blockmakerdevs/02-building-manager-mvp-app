{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _excluded = [\"blurView\", \"enableModalBlur\", \"visible\", \"useGestureHandlerRootView\", \"useKeyboardAvoidingView\", \"keyboardAvoidingViewProps\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport _isFunction from \"lodash/isFunction\";\nimport React, { Component } from 'react';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport RNModal from \"react-native-web/dist/exports/Modal\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { BlurViewPackage } from \"../../optionalDependencies\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport TopBar, { ModalTopBarProps } from \"./TopBar\";\nimport View from \"../../components/view\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar BlurView = BlurViewPackage == null ? void 0 : BlurViewPackage.BlurView;\nexport { ModalTopBarProps };\nvar Modal = function (_Component) {\n  _inherits(Modal, _Component);\n  function Modal(props) {\n    var _this;\n    _classCallCheck(this, Modal);\n    _this = _callSuper(this, Modal, [props]);\n    if (props.enableModalBlur && !BlurView) {\n      console.error(`RNUILib Modal's \"enableModalBlur\" prop requires installing \"@react-native-community/blur\" dependency`);\n    }\n    return _this;\n  }\n  _createClass(Modal, [{\n    key: \"renderTouchableOverlay\",\n    value: function renderTouchableOverlay() {\n      var _this$props = this.props,\n        testID = _this$props.testID,\n        overlayBackgroundColor = _this$props.overlayBackgroundColor,\n        onBackgroundPress = _this$props.onBackgroundPress,\n        _this$props$accessibi = _this$props.accessibilityLabel,\n        accessibilityLabel = _this$props$accessibi === void 0 ? 'Dismiss' : _this$props$accessibi;\n      if (_isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n        var isScreenReaderEnabled = !Constants.isWeb && Constants.accessibility.isScreenReaderEnabled;\n        var accessibilityProps = isScreenReaderEnabled ? {\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          accessibilityRole: 'button'\n        } : undefined;\n        return _jsx(View, {\n          useSafeArea: isScreenReaderEnabled,\n          style: !isScreenReaderEnabled && [styles.touchableOverlay, {\n            backgroundColor: overlayBackgroundColor\n          }],\n          testID: `${testID}.TouchableOverlay`,\n          children: _jsx(TouchableWithoutFeedback, _objectSpread(_objectSpread({}, accessibilityProps), {}, {\n            onPress: onBackgroundPress,\n            children: _jsx(View, {\n              style: isScreenReaderEnabled ? styles.accessibleOverlayView : styles.fill\n            })\n          }))\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        blurView = _this$props2.blurView,\n        enableModalBlur = _this$props2.enableModalBlur,\n        visible = _this$props2.visible,\n        useGestureHandlerRootView = _this$props2.useGestureHandlerRootView,\n        useKeyboardAvoidingView = _this$props2.useKeyboardAvoidingView,\n        keyboardAvoidingViewProps = _this$props2.keyboardAvoidingViewProps,\n        others = _objectWithoutProperties(_this$props2, _excluded);\n      var defaultContainer = enableModalBlur && Constants.isIOS && BlurView ? BlurView : View;\n      var useGestureHandler = useGestureHandlerRootView && Constants.isAndroid;\n      var GestureContainer = useGestureHandler ? GestureHandlerRootView : React.Fragment;\n      var gestureContainerProps = useGestureHandler ? {\n        style: styles.fill\n      } : {};\n      var useKeyboardAvoiding = useKeyboardAvoidingView && Constants.isIOS;\n      var KeyboardAvoidingContainer = useKeyboardAvoiding ? KeyboardAvoidingView : React.Fragment;\n      var keyboardAvoidingContainerProps = useKeyboardAvoiding ? _objectSpread(_objectSpread({\n        behavior: 'padding'\n      }, keyboardAvoidingViewProps), {}, {\n        style: [styles.fill, keyboardAvoidingViewProps == null ? void 0 : keyboardAvoidingViewProps.style]\n      }) : {};\n      var Container = blurView ? blurView : defaultContainer;\n      return _jsx(RNModal, _objectSpread(_objectSpread({\n        visible: Boolean(visible)\n      }, others), {}, {\n        children: _jsx(GestureContainer, _objectSpread(_objectSpread({}, gestureContainerProps), {}, {\n          children: _jsx(KeyboardAvoidingContainer, _objectSpread(_objectSpread({}, keyboardAvoidingContainerProps), {}, {\n            children: _jsxs(Container, {\n              style: styles.fill,\n              blurType: \"light\",\n              children: [this.renderTouchableOverlay(), this.props.children]\n            })\n          }))\n        }))\n      }));\n    }\n  }]);\n  return Modal;\n}(Component);\nModal.displayName = 'Modal';\nvar styles = StyleSheet.create({\n  touchableOverlay: _objectSpread({}, StyleSheet.absoluteFillObject),\n  fill: {\n    flex: 1\n  },\n  accessibleOverlayView: {\n    height: 50,\n    width: '100%'\n  }\n});\nModal.TopBar = TopBar;\nexport default asBaseComponent(Modal);","map":{"version":3,"names":["_isFunction","React","Component","GestureHandlerRootView","StyleSheet","RNModal","TouchableWithoutFeedback","KeyboardAvoidingView","BlurViewPackage","Constants","asBaseComponent","TopBar","ModalTopBarProps","View","jsx","_jsx","jsxs","_jsxs","BlurView","Modal","_Component","_inherits","props","_this","_classCallCheck","_callSuper","enableModalBlur","console","error","_createClass","key","value","renderTouchableOverlay","_this$props","testID","overlayBackgroundColor","onBackgroundPress","_this$props$accessibi","accessibilityLabel","isScreenReaderEnabled","isWeb","accessibility","accessibilityProps","accessible","accessibilityRole","undefined","useSafeArea","style","styles","touchableOverlay","backgroundColor","children","_objectSpread","onPress","accessibleOverlayView","fill","render","_this$props2","blurView","visible","useGestureHandlerRootView","useKeyboardAvoidingView","keyboardAvoidingViewProps","others","_objectWithoutProperties","_excluded","defaultContainer","isIOS","useGestureHandler","isAndroid","GestureContainer","Fragment","gestureContainerProps","useKeyboardAvoiding","KeyboardAvoidingContainer","keyboardAvoidingContainerProps","behavior","Container","Boolean","blurType","displayName","create","absoluteFillObject","flex","height","width"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/modal/index.js"],"sourcesContent":["import _isFunction from \"lodash/isFunction\";\nimport React, { Component } from 'react';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { StyleSheet, Modal as RNModal, TouchableWithoutFeedback, KeyboardAvoidingView } from 'react-native';\nimport { BlurViewPackage } from \"../../optionalDependencies\";\nimport { Constants, asBaseComponent } from \"../../commons/new\";\nimport TopBar, { ModalTopBarProps } from \"./TopBar\";\nimport View from \"../../components/view\";\nconst BlurView = BlurViewPackage?.BlurView;\nexport { ModalTopBarProps };\n/**\n * @description: Component that present content on top of the invoking screen\n * @extends: Modal\n * @extendsLink: https://reactnative.dev/docs/modal\n * @gif: https://media.giphy.com/media/3oFzmfSX8KgvctI4Ks/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx\n */\nclass Modal extends Component {\n  static displayName = 'Modal';\n  constructor(props) {\n    super(props);\n    if (props.enableModalBlur && !BlurView) {\n      console.error(`RNUILib Modal's \"enableModalBlur\" prop requires installing \"@react-native-community/blur\" dependency`);\n    }\n  }\n  renderTouchableOverlay() {\n    const {\n      testID,\n      overlayBackgroundColor,\n      onBackgroundPress,\n      accessibilityLabel = 'Dismiss'\n    } = this.props;\n    if (_isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n      const isScreenReaderEnabled = !Constants.isWeb && Constants.accessibility.isScreenReaderEnabled;\n      const accessibilityProps = isScreenReaderEnabled ? {\n        accessible: true,\n        accessibilityLabel,\n        accessibilityRole: 'button'\n      } : undefined;\n      return (\n        // @ts-ignore\n        <View useSafeArea={isScreenReaderEnabled} style={!isScreenReaderEnabled && [styles.touchableOverlay, {\n          backgroundColor: overlayBackgroundColor\n        }]} testID={`${testID}.TouchableOverlay`}>\n          {/*\n            // @ts-ignore */}\n          <TouchableWithoutFeedback {...accessibilityProps} onPress={onBackgroundPress}>\n            <View style={isScreenReaderEnabled ? styles.accessibleOverlayView : styles.fill} />\n          </TouchableWithoutFeedback>\n        </View>\n      );\n    }\n  }\n  render() {\n    const {\n      blurView,\n      enableModalBlur,\n      visible,\n      useGestureHandlerRootView,\n      useKeyboardAvoidingView,\n      keyboardAvoidingViewProps,\n      ...others\n    } = this.props;\n    const defaultContainer = enableModalBlur && Constants.isIOS && BlurView ? BlurView : View;\n    const useGestureHandler = useGestureHandlerRootView && Constants.isAndroid;\n    const GestureContainer = useGestureHandler ? GestureHandlerRootView : React.Fragment;\n    const gestureContainerProps = useGestureHandler ? {\n      style: styles.fill\n    } : {};\n    const useKeyboardAvoiding = useKeyboardAvoidingView && Constants.isIOS;\n    const KeyboardAvoidingContainer = useKeyboardAvoiding ? KeyboardAvoidingView : React.Fragment;\n    const keyboardAvoidingContainerProps = useKeyboardAvoiding ? {\n      behavior: 'padding',\n      ...keyboardAvoidingViewProps,\n      style: [styles.fill, keyboardAvoidingViewProps?.style]\n    } : {};\n    const Container = blurView ? blurView : defaultContainer;\n    return <RNModal visible={Boolean(visible)} {...others}>\n        <GestureContainer {...gestureContainerProps}>\n          <KeyboardAvoidingContainer {...keyboardAvoidingContainerProps}>\n            <Container style={styles.fill} blurType=\"light\">\n              {this.renderTouchableOverlay()}\n              {this.props.children}\n            </Container>\n          </KeyboardAvoidingContainer>\n        </GestureContainer>\n      </RNModal>;\n  }\n}\nconst styles = StyleSheet.create({\n  touchableOverlay: {\n    ...StyleSheet.absoluteFillObject\n  },\n  fill: {\n    flex: 1\n  },\n  accessibleOverlayView: {\n    height: 50,\n    width: '100%'\n  }\n});\nModal.TopBar = TopBar;\nexport default asBaseComponent(Modal);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}