{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar DynamicFont = NativeModules.DynamicFont;\nvar FontLoader = function () {\n  function FontLoader(props) {\n    var _this = this;\n    _classCallCheck(this, FontLoader);\n    this.loadedFonts = new Map();\n    this.loadFont = function (_ref) {\n      var fontName = _ref.fontName,\n        base64FontString = _ref.base64FontString,\n        _ref$fontExtension = _ref.fontExtension,\n        fontExtension = _ref$fontExtension === void 0 ? 'ttf' : _ref$fontExtension,\n        _ref$forceLoad = _ref.forceLoad,\n        forceLoad = _ref$forceLoad === void 0 ? false : _ref$forceLoad;\n      if (!forceLoad && _this.loadedFonts.has(fontName)) {\n        _this.log(fontName, 'Already loaded');\n        return Promise.resolve(_this.loadedFonts.get(fontName));\n      }\n      if (!fontName) {\n        throw new Error('fontName is a required argument');\n      }\n      if (!base64FontString) {\n        throw new Error('base64FontString is a required argument');\n      }\n      _this.log(fontName, 'Starting to load');\n      return new Promise(function (resolve, reject) {\n        DynamicFont.loadFont({\n          name: fontName,\n          data: base64FontString,\n          type: fontExtension\n        }, function (err, givenName) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          _this.loadedFonts.set(fontName, givenName);\n          resolve(givenName);\n        });\n      });\n    };\n    this.loadFonts = function (fonts, forceLoad) {\n      if (!fonts) {\n        return Promise.resolve([]);\n      }\n      var fontsArray = fonts instanceof Array ? fonts : [fonts];\n      return Promise.all(fontsArray.filter(function (font) {\n        return font;\n      }).map(function (font) {\n        return _this.loadFont(_objectSpread({\n          forceLoad: forceLoad\n        }, font));\n      }));\n    };\n    this.props = props;\n  }\n  _createClass(FontLoader, [{\n    key: \"log\",\n    value: function log(message) {\n      var debug = this.props.debug;\n      if (debug) {\n        for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          optionalParams[_key - 1] = arguments[_key];\n        }\n        console.log(message, optionalParams);\n      }\n    }\n  }]);\n  return FontLoader;\n}();\nexport { FontLoader as default };","map":{"version":3,"names":["DynamicFont","NativeModules","FontLoader","props","_this","_classCallCheck","loadedFonts","Map","loadFont","_ref","fontName","base64FontString","_ref$fontExtension","fontExtension","_ref$forceLoad","forceLoad","has","log","Promise","resolve","get","Error","reject","name","data","type","err","givenName","set","loadFonts","fonts","fontsArray","Array","all","filter","font","map","_objectSpread","_createClass","key","value","message","debug","_len","arguments","length","optionalParams","_key","console","default"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/lib/components/DynamicFonts/FontLoader.js"],"sourcesContent":["import { NativeModules } from 'react-native';\nconst {\n  DynamicFont\n} = NativeModules;\nexport default class FontLoader {\n  loadedFonts = new Map();\n  constructor(props) {\n    this.props = props;\n  }\n  log(message, ...optionalParams) {\n    const {\n      debug\n    } = this.props;\n    if (debug) {\n      console.log(message, optionalParams);\n    }\n  }\n  loadFont = ({\n    fontName,\n    base64FontString,\n    fontExtension = 'ttf',\n    forceLoad = false\n  }) => {\n    /* Check if this font was already loaded */\n    if (!forceLoad && this.loadedFonts.has(fontName)) {\n      this.log(fontName, 'Already loaded');\n      return Promise.resolve(this.loadedFonts.get(fontName));\n    }\n    if (!fontName) {\n      throw new Error('fontName is a required argument');\n    }\n    if (!base64FontString) {\n      throw new Error('base64FontString is a required argument');\n    }\n    this.log(fontName, 'Starting to load');\n    /* Load font via native binary code */\n    return new Promise((resolve, reject) => {\n      DynamicFont.loadFont({\n        name: fontName,\n        data: base64FontString,\n        type: fontExtension\n      }, (err, givenName) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        /* Loaded successfully... resolve promise with \"real\" font name */\n        this.loadedFonts.set(fontName, givenName);\n        resolve(givenName);\n      });\n    });\n  };\n\n  // TODO: Needs to be tested\n  // public loadFontFromFile = (fontName: string, filePath: string) => {\n  //   if (!fontName) {\n  //     throw new Error('name is a required argument');\n  //   }\n\n  //   if (!filePath) {\n  //     throw new Error('filePath is a required argument');\n  //   }\n\n  //   return new Promise((resolve, reject) => {\n  //     DynamicFont.loadFontFromFile({\n  //       name: fontName,\n  //       filePath\n  //     },\n  //     (err: string, givenName: string) => {\n  //       if (err) {\n  //         reject(err);\n  //         return;\n  //       }\n  //       resolve(givenName);\n  //     });\n  //   });\n  // };\n\n  loadFonts = (fonts, forceLoad) => {\n    if (!fonts) {\n      return Promise.resolve([]);\n    }\n    const fontsArray = fonts instanceof Array ? fonts : [fonts];\n    return Promise.all(fontsArray.filter(font => font).map(font => this.loadFont({\n      forceLoad,\n      ...font\n    })));\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}