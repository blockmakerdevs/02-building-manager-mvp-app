{"ast":null,"code":"import { useEffect } from 'react';\nimport { MomentPackage as moment } from \"../../optionalDependencies\";\nvar useOldApi = function useOldApi(props) {\n  var dateFormat = props.dateFormat,\n    dateFormatter = props.dateFormatter,\n    timeFormat = props.timeFormat,\n    timeFormatter = props.timeFormatter;\n  useEffect(function () {\n    if (!moment && (dateFormat || timeFormat)) {\n      console.error(`RNUILib DateTimePicker component with date/time format requires installing \"moment\" dependency`);\n    }\n  }, [dateFormat, timeFormat]);\n  var getStringValue = function getStringValue(value, mode) {\n    if (value) {\n      switch (mode) {\n        case 'date':\n          return dateFormatter ? dateFormatter(value) : dateFormat && moment ? moment(value).format(dateFormat) : value.toLocaleDateString();\n        case 'time':\n          return timeFormatter ? timeFormatter(value) : timeFormat && moment ? moment(value).format(timeFormat) : value.toLocaleTimeString();\n      }\n    }\n  };\n  return {\n    getStringValue: getStringValue\n  };\n};\nexport default useOldApi;","map":{"version":3,"names":["useEffect","MomentPackage","moment","useOldApi","props","dateFormat","dateFormatter","timeFormat","timeFormatter","console","error","getStringValue","value","mode","format","toLocaleDateString","toLocaleTimeString"],"sources":["/Users/mac/Repositories/BlockmakerIT/02-building-manager-mvp-app/node_modules/react-native-ui-lib/src/components/dateTimePicker/useOldApi.js"],"sourcesContent":["// TODO: delete whole file in v8\nimport { useEffect } from 'react';\nimport { MomentPackage as moment } from \"../../optionalDependencies\";\n\n// This file will be deleted in the next major version,\n// duplicating these here will make this less complicated\n// than removing the duplication\n\nconst useOldApi = props => {\n  const {\n    dateFormat,\n    dateFormatter,\n    timeFormat,\n    timeFormatter\n  } = props;\n  useEffect(() => {\n    if (!moment && (dateFormat || timeFormat)) {\n      console.error(`RNUILib DateTimePicker component with date/time format requires installing \"moment\" dependency`);\n    }\n  }, [dateFormat, timeFormat]);\n  const getStringValue = (value, mode) => {\n    if (value) {\n      switch (mode) {\n        case 'date':\n          return dateFormatter ? dateFormatter(value) : dateFormat && moment ? moment(value).format(dateFormat) : value.toLocaleDateString();\n        case 'time':\n          return timeFormatter ? timeFormatter(value) : timeFormat && moment ? moment(value).format(timeFormat) : value.toLocaleTimeString();\n      }\n    }\n  };\n  return {\n    getStringValue\n  };\n};\nexport default useOldApi;"],"mappings":"AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,aAAa,IAAIC,MAAM;AAMhC,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAGC,KAAK,EAAI;EACzB,IACEC,UAAU,GAIRD,KAAK,CAJPC,UAAU;IACVC,aAAa,GAGXF,KAAK,CAHPE,aAAa;IACbC,UAAU,GAERH,KAAK,CAFPG,UAAU;IACVC,aAAa,GACXJ,KAAK,CADPI,aAAa;EAEfR,SAAS,CAAC,YAAM;IACd,IAAI,CAACE,MAAM,KAAKG,UAAU,IAAIE,UAAU,CAAC,EAAE;MACzCE,OAAO,CAACC,KAAK,CAAE,gGAA+F,CAAC;IACjH;EACF,CAAC,EAAE,CAACL,UAAU,EAAEE,UAAU,CAAC,CAAC;EAC5B,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,KAAK,EAAEC,IAAI,EAAK;IACtC,IAAID,KAAK,EAAE;MACT,QAAQC,IAAI;QACV,KAAK,MAAM;UACT,OAAOP,aAAa,GAAGA,aAAa,CAACM,KAAK,CAAC,GAAGP,UAAU,IAAIH,MAAM,GAAGA,MAAM,CAACU,KAAK,CAAC,CAACE,MAAM,CAACT,UAAU,CAAC,GAAGO,KAAK,CAACG,kBAAkB,CAAC,CAAC;QACpI,KAAK,MAAM;UACT,OAAOP,aAAa,GAAGA,aAAa,CAACI,KAAK,CAAC,GAAGL,UAAU,IAAIL,MAAM,GAAGA,MAAM,CAACU,KAAK,CAAC,CAACE,MAAM,CAACP,UAAU,CAAC,GAAGK,KAAK,CAACI,kBAAkB,CAAC,CAAC;MACtI;IACF;EACF,CAAC;EACD,OAAO;IACLL,cAAc,EAAdA;EACF,CAAC;AACH,CAAC;AACD,eAAeR,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}